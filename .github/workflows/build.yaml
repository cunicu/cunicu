# SPDX-FileCopyrightText: 2023-2025 Steffen Vogel <post@steffenvogel.de>
# SPDX-License-Identifier: Apache-2.0

# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/github-workflow.json
---
name: Build

on:
  push:
    branches:
    - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  nix-update:
    name: Update Nix hashes
    runs-on: ubuntu-24.04

    outputs:
      tag-current: ${{ steps.tags.outputs.current }}
      tag-next: ${{ steps.tags.outputs.next }}
      changed: ${{ steps.nix-update-hashes.outputs.changed }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
        token: ${{ secrets.PAT }}

    - name: Setup Nix
      uses: DeterminateSystems/nix-installer-action@v16

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@v8

    - name: Setup Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

    - name: Get current and next tag
      id: tags
      run: |
        nix develop .#ci --command sh <<'EOF' | tee "$GITHUB_OUTPUT"
          # We always increment the patch version to ensure hashes of Nix derivations are updated
          # by our GitHub actions tag workflow which runs nix-update
          echo next=$(svu next)
          echo current=$(svu current)
        EOF

    - name: Update version and vendor hashes in Nix derivation
      id: nix-update-hashes
      run: |
        nix develop .#ci --command sh <<'EOF'
            VERSION="${{ steps.tags.outputs.next || steps.tags.outputs.current }}"

            nix-update --flake gocov-merger
            nix-update --flake --version ${VERSION} cunicu
            nix-update --flake --version ${VERSION} scripts
            nix-update --flake --version ${VERSION} --subpackage yarnOfflineCache website
        EOF

        git diff --quiet || echo "changed=true" >> "$GITHUB_OUTPUT"

    - name: Commit changes
      id: git-commit
      if: steps.nix-update-hashes.outputs.changed == 'true'
      run: |
        LAST_AUTHOR=$(git log -1 --pretty=format:"%ae")
        RENOVATE_AUTHOR="29139614+renovate[bot]@users.noreply.github.com"

        if [ "${LAST_AUTHOR}" = "${RENOVATE_AUTHOR}" ]; then
          git commit --all --amend --no-edit
          git push --force
        else
          git commit --all --signoff --message "fix(nix): Update version and hashes"
          git push
        fi

  build:
    name: Build for Windows
    if: github.event.head_commit.committer.name != 'github-actions[bot]' # Skip builds triggered by GitHub Actions, e.g. the tagging job below
    runs-on: windows-latest
    needs:
    - nix-update

    strategy:
      fail-fast: false
      matrix:
        include:
        - target_arch: arm64
          host_arch: amd64
        - target_arch: amd64
          host_arch: amd64

    env:
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: choco install
            protoc
            make

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        check-latest: true

    - name: Install build and test dependencies
      env:
        GOOS: ${{ matrix.host_os }}
        GOARCH: ${{ matrix.host_arch }}
      run: make install-deps

    - name: Run cunīcu build
      run: |
        make cunicu

    - name: Lint
      run: make lint

    - name: Run tests for Windows # which has no sudo
      if: matrix.target_arch == matrix.host_arch && matrix.target_os == matrix.host_os
      run: make tests GINKGO_OPTS="--label-filter=!broken-on-windows"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Pass token via environment variable to avoid GitHub API rate-limit


  build-nix:
    name: Build with Nix for ${{ matrix.target_os }} on ${{ matrix.target_arch }}${{ matrix.target_arch == 'arm' && format('-v{0}', matrix.arm) || ''}}${{ matrix.target_arch == 'mips' && format('-{0}', matrix.mips) || ''}}
    if: github.event.head_commit.committer.name != 'github-actions[bot]' # Skip builds triggered by GitHub Actions, e.g. the tagging job below
    runs-on: ${{ matrix.runner }}
    needs:
    - nix-update

    strategy:
      fail-fast: false
      matrix:
        include:
        - target_os: linux
          target_arch: amd64
          host_os: linux
          host_arch: amd64
          runner: ubuntu-24.04

        - target_os: linux
          target_arch: arm64
          host_os: linux
          host_arch: amd64
          runner: ubuntu-24.04

        - target_os: linux
          target_arch: arm
          host_os: linux
          host_arch: amd64
          arm: "7"
          runner: ubuntu-24.04

        - target_os: linux
          target_arch: mips
          host_os: linux
          host_arch: amd64
          mips: softfloat
          runner: ubuntu-24.04

        - target_os: linux
          target_arch: mips
          host_os: linux
          host_arch: amd64
          mips: hardfloat
          runner: ubuntu-24.04

        # TODO: FreeBSD builds require cgo and FreeBSD
        #       system headers.

        # - target_os: freebsd
        #   target_arch: amd64
        #   host_os: linux
        #   host_arch: amd64
        #   runner: ubuntu-24.04

        # - target_os: freebsd
        #   target_arch: arm64
        #   host_os: linux
        #   host_arch: amd64
        #   runner: ubuntu-24.04

        # - target_os: freebsd
        #   target_arch: arm
        #   host_os: linux
        #   host_arch: amd64
        #   arm: "7"
        #   runner: ubuntu-24.04

        - target_os: darwin
          target_arch: arm64
          host_os: darwin
          host_arch: arm64
          runner: macos-latest

        - target_os: darwin
          target_arch: amd64
          host_os: darwin
          host_arch: arm64
          runner: macos-latest

    env:
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOARM: ${{ matrix.arm || '' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: DeterminateSystems/nix-installer-action@v16

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@v8

    - name: Lint
      run: make lint

    - name: Run cunīcu build
      run: |
        nix build --print-build-logs .#cunicu

    - name: Run tests
      if: matrix.target_arch == matrix.host_arch && matrix.target_os == matrix.host_os
      run: sudo --preserve-env env "PATH=$PATH" make tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Pass token via environment variable to avoid GitHub API rate-limit

    - name: Run end-to-end tests
      if: matrix.target_arch == matrix.host_arch && matrix.target_os == matrix.host_os && matrix.host_os == 'linux'
      run: sudo --preserve-env env "PATH=$PATH" make tests-e2e

    - name: Upload logs an packet captures as artifacts
      if: always() && matrix.target_arch == matrix.host_arch && matrix.target_os == matrix.host_os && matrix.host_os == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-${{ matrix.target_os }}-${{ matrix.target_arch }}
        path: test/e2e/logs/

    - name: Create merged coverage profile
      if: matrix.target_os == 'linux' && matrix.target_arch == 'amd64'
      run: |
        make coverprofile_merged.out

    - name: Report test coverage to Codecov
      if: matrix.target_os == 'linux' && matrix.target_arch == 'amd64'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverprofile_merged.out


  website:
    needs:
    - build
    uses: ./.github/workflows/website.yaml

  tag:
    name: Tag
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: release
    runs-on: ubuntu-24.04

    needs:
    - build
    - build-nix

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT }}

    - name: Setup Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

    - name: Tag new release
      id: git-tag
      if: steps.tags.outputs.current != steps.tags.outputs.next
      run: |
        git tag ${{ needs.nix-update.outputs.tag-next }}
        git push origin tag ${{ needs.nix-update.outputs.tag-next }}
