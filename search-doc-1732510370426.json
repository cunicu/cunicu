{"searchDocs":[{"title":"Announcing Our New Community Space: Forum, Chat, and Wiki!","type":0,"sectionRef":"#","url":"/blog/community","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":null},{"title":"How to Join‚Äã","type":1,"pageTitle":"Announcing Our New Community Space: Forum, Chat, and Wiki!","url":"/blog/community#how-to-join","content":" Joining our new community space is simple. Whether you're a seasoned contributor or a newcomer, everyone is welcome. Just head over to our platform, sign up, and start exploring the forum, engaging in chat, and contributing to the wiki.  tip Visit our Discourse at: discuss.cunicu.li.  ","version":null,"tagName":"h2"},{"title":"Access and Participation‚Äã","type":1,"pageTitle":"Announcing Our New Community Space: Forum, Chat, and Wiki!","url":"/blog/community#access-and-participation","content":" For those who wish to browse and read content, our community space offers read-only access without the need for an account. However, if you'd like to actively participate, you'll need to create an account. To make the process seamless, login is also possible via GitHub, allowing you to quickly join the conversation and contribute.  ","version":null,"tagName":"h2"},{"title":"Why This Matters‚Äã","type":1,"pageTitle":"Announcing Our New Community Space: Forum, Chat, and Wiki!","url":"/blog/community#why-this-matters","content":" Creating a vibrant community space is about more than just providing tools; it's about fostering an environment where collaboration and learning thrive. By integrating these three key components, we aim to create a cohesive and supportive ecosystem that enhances the overall user experience and drives innovation.  We look forward to seeing you in the new community space. Let's build, learn, and grow together!  Generated via https://getimg.ai/ ","version":null,"tagName":"h2"},{"title":"Comparison with other P2P VPN solutions","type":0,"sectionRef":"#","url":"/docs/comparison","content":"Comparison with other P2P VPN solutions There exist a suite of other peer-to-peer VPN solutions comparable to cunƒ´cu: Tinc-VPNweronTailscaleZerotiernetbird (formerly Wiretrustee)wg-dynamicNebulaNetmaker You might also want to have a look at @HarvsG WireGuardMeshes comparison.","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":null},{"title":"First release‚Äã","type":1,"pageTitle":"Welcome","url":"/blog/welcome#first-release","content":" We are planning to publish the first official release within the next 4-10 weeks üéâ. The release pipeline, packaging and self-update feature and more has already been implemented. We just need to finish the last features and do quite some more testing.  ","version":null,"tagName":"h3"},{"title":"Website, Docs and Twitter‚Äã","type":1,"pageTitle":"Welcome","url":"/blog/welcome#website-docs-and-twitter","content":" The project has now its dedicated website, GitHub organization and Twitter handle (@cunicuVPN). Feel free to follow us there for updates!  You might also have realized that the project name has changed. We decided to rebrand from the previous name wice to avoid any potential trademark issues with the WireGuard project as well as another small German company named WICE. The project name cunƒ´cu [k äÀàniÀêk ä] is derived from the latin noun cunƒ´culus which means rabbit, a rabbit burrow or underground tunnel. We have choosen it as a name for this project as cunƒ´cu builds tunnels between otherwise hard to reach network locations.  This also gave us the opportunity to redesign the logo which you find further down in the sticker design.  ","version":null,"tagName":"h3"},{"title":"Stickers‚Äã","type":1,"pageTitle":"Welcome","url":"/blog/welcome#stickers","content":" We have stickers! Just reach out and I will send you some or talk to me at some of the upcoming conferences.  The sticker design ","version":null,"tagName":"h3"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/config","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Command Line Flags‚Äã","type":1,"pageTitle":"Configuration","url":"/docs/config#command-line-flags","content":" Basic options of cunicu daemon can be configured by passing command line arguments. A full overview is available in its manpage.  ","version":"Next","tagName":"h2"},{"title":"Configuration File‚Äã","type":1,"pageTitle":"Configuration","url":"/docs/config#configuration-file","content":" For more advanced setups, a configuration file can be used for a persistent configuration:  Please have a look at the example configuration file for a full reference of all available settings.  ","version":"Next","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"Configuration","url":"/docs/config#environment-variables","content":" All the settings from the configuration file can also be passed via environment variables by following the following rules:  Convert the setting name to uppercasePrefixing the setting name with CUNICU_Nested settings are separated by underscores  Example: The setting ice.max_binding_requests can be set by the environment variable CUNICU_ICE_MAX_BINDING_REQUESTS  note Setting lists such as ice.urls or backends can currently not be set via environment variables.  ","version":"Next","tagName":"h2"},{"title":"At Runtime‚Äã","type":1,"pageTitle":"Configuration","url":"/docs/config#at-runtime","content":" cunƒ´cu's configuration can also be updated at runtime, alleviating daemon restarts and interruption of connectivity.  Please have a look at the cunicu config commands.  Currently, not all settings are runtime tunable.  Changed settings via the cunicu config set command are persisted in a runtime configuration file at /var/lib/cunicu.runtime.yaml. So runtime changes will also be taken into account for subsequent starts of the daemon.  ","version":"Next","tagName":"h2"},{"title":"DNS Auto-configuration‚Äã","type":1,"pageTitle":"Configuration","url":"/docs/config#dns-auto-configuration","content":" cunƒ´cu als supports retrieving parts of the configuration via DNS lookups. This is useful for corporate environments in which a fleet of cunƒ´cu daemon need to be configured centrally.  In this case cunicu daemon is started one or more --domain example.com parameters to look for the following DNS records to obtain its configuration.  STUN and TURN servers used for ICE are retrieved by SVR lookups and other cunƒ´cu settings are retrieved via SRV and TXT lookups:  _stun._udp.example.com. 3600 IN SRV 10 0 3478 stun.example.com. _stuns._tcp.example.com. 3600 IN SRV 10 0 3478 stun.example.com. _turn._udp.example.com. 3600 IN SRV 10 0 3478 turn.example.com. _turn._tcp.example.com. 3600 IN SRV 10 0 3478 turn.example.com. _turns._tcp.example.com. 3600 IN SRV 10 0 5349 turn.example.com. example.com. 3600 IN TXT &quot;cunicu-config=https://example.com/cunicu.yaml&quot; example.com. 3600 IN TXT &quot;cunicu-backend=grpc://signal.example.com:443&quot; example.com. 3600 IN TXT &quot;cunicu-community=my-community-password&quot; example.com. 3600 IN TXT &quot;cunicu-ice-username=user1&quot; example.com. 3600 IN TXT &quot;cunicu-ice-password=pass1&quot;   note The cunicu-backend and cunicu-config TXT records can be provided multiple times. Others not.  ","version":"Next","tagName":"h2"},{"title":"Remote Configuration Files‚Äã","type":1,"pageTitle":"Configuration","url":"/docs/config#remote-configuration-files","content":" When cunicu daemon can be started with --config options pointing to HTTPS URIs:  cunicu daemon --config http://example.com/cunicu.yaml   cunƒ´cu will download all configuration files in the order they are specified on the command line and merge them subsequently.  This feature can be combined with the DNS auto-configuration method by providing a TXT record pointing to the configuration file:  example.com. 3600 IN TXT &quot;cunicu-config=https://example.com/cunicu.yaml&quot;   note Remote configuration files must be fetched via HTTPS if they are not hosted locally and required a trusted server certificate.  ","version":"Next","tagName":"h2"},{"title":"Auto-reload‚Äã","type":1,"pageTitle":"Configuration","url":"/docs/config#auto-reload","content":" cunƒ´cu can watch local and remote files as well as the DNS configuration for changes and automatically reloads its configuration from them whenever a change has been detected.  Pass the --watch-config or -w command line options to cunicu daemon to enable this feature.  For local files the change is detected by inotify(7). For remote sources, cunƒ´cu periodically checks the Last-Modified and Etag headers in case of HTTP files or the DNS zone's SOA serial number to detect changes without request the full remote source.  note Configuration file distributed via conicu-config DNS TXT record are not yet monitored for changes. ","version":"Next","tagName":"h2"},{"title":"Contact","type":0,"sectionRef":"#","url":"/docs/contact","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":" Community‚Äã","type":1,"pageTitle":"Contact","url":"/docs/contact#-community","content":" We are hosting our own forum, chat and wiki at discuss.cunicu.li. Feel free to say hi üëã, discuss cunƒ´cu, ask questions or share ideas.  ","version":"Next","tagName":"h2"},{"title":"ü•∑ Maintainer‚Äã","type":1,"pageTitle":"Contact","url":"/docs/contact#-maintainer","content":" We are still mostly a one-man show driven by Steffen Vogel:   GitHub: stv0g Discourse: stv0g Fediverse: @stv0g@chaos.socialüîó Web: steffenvogel.de‚úâÔ∏è E-Mail: post@steffenvogel.de  A complete list of all maintainers can be found on GitHub.  ","version":"Next","tagName":"h2"},{"title":" Contributors‚Äã","type":1,"pageTitle":"Contact","url":"/docs/contact#-contributors","content":" A list of all contributors can be found on GitHub.  ","version":"Next","tagName":"h2"},{"title":"‚úâÔ∏è E-Mail‚Äã","type":1,"pageTitle":"Contact","url":"/docs/contact#Ô∏è-e-mail","content":" As a last resort, you can reach also reach us at info@cunicu.li. ","version":"Next","tagName":"h2"},{"title":"Design","type":0,"sectionRef":"#","url":"/docs/design","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Architecture‚Äã","type":1,"pageTitle":"Design","url":"/docs/design#architecture","content":"   ","version":"Next","tagName":"h2"},{"title":"Objectives‚Äã","type":1,"pageTitle":"Design","url":"/docs/design#objectives","content":" Encrypt all signaling messages Plug-able signaling backends: GRPCKubernetes API-serverWebSocket Support Trickle ICE Support ICE restart Support ICE-TCP Encrypt exchanged ICE offers with WireGuard keys Seamless switch between ICE candidates and relays Zero configuration Alleviate users of exchanging endpoint IPs &amp; ports Enables direct communication of WireGuard peers behind NAT / UDP-blocking firewalls Single-binary, zero dependency installation Bundled ICE agent &amp; WireGuard user-space daemonPortability Support for user and kernel-space WireGuard implementations Zero performance impact Kernel-side filtering / redirection of WireGuard trafficFallback to user-space proxying only if no Kernel features are available Minimized attack surface Drop privileges after initial configuration Compatible with existing WireGuard configuration utilities like: NetworkManagersystemd-networkdwg-quickKilodrago Monitoring for new WireGuard interfaces and peers Inotify for new UAPI sockets in /var/run/wireguardNetlink subscription for link updates (patch is pending)  ","version":"Next","tagName":"h2"},{"title":"Related RFCs‚Äã","type":1,"pageTitle":"Design","url":"/docs/design#related-rfcs","content":" RFC6544 TCP Candidates with Interactive Connectivity Establishment (ICE)RFC8838 Trickle ICE: Incremental Provisioning of Candidates for the Interactive Connectivity Establishment (ICE) ProtocolRFC8445 Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) TraversalRFC8863 Interactive Connectivity Establishment Patiently Awaiting Connectivity (ICE PAC)RFC8839 Session Description Protocol (SDP) Offer/Answer Procedures for Interactive Connectivity Establishment (ICE)RFC6062 Traversal Using Relays around NAT (TURN) Extensions for TCP AllocationsRFC8656 Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN)RFC8489 Session Traversal Utilities for NAT (STUN)RFC8866 SDP: Session Description ProtocolRFC3264 An Offer/Answer Model with the Session Description Protocol (SDP)RFC7064 URI Scheme for the Session Traversal Utilities for NAT (STUN) ProtocolRFC7065 Traversal Using Relays around NAT (TURN) Uniform Resource Identifiers ","version":"Next","tagName":"h2"},{"title":"Development","type":0,"sectionRef":"#","url":"/docs/dev","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Testing‚Äã","type":1,"pageTitle":"Development","url":"/docs/dev#testing","content":" We aim to maintain a test coverage above 80% of the lines of code. Please make sure that your merge requests include tests which do not lower the coverage percentage.  cunƒ´cu's code-base is tested using the Ginkgo / Gomega testing framework. Unit tests can be found alongside the code in files with a _test.go suffix. End-to-end (e2e) integration tests can be found in the test/e2e directory.  The e2e tests use Gont to construct virtual network environment using Linux's net namespaces and veth point-to-point links. This allows us to test cunƒ´cu in both simple and complex network topologies including, L2 switches, L3 routers, firewalls and NAT boxes.  ","version":"Next","tagName":"h2"},{"title":"Nix‚Äã","type":1,"pageTitle":"Development","url":"/docs/dev#nix","content":" We provide a Nix flake for cunƒ´cu and most related Git repositories to quickly jump into a reproducable development shell by running:  nix develop ./nix   In this shell all required build-time dependencies and tools for cunƒ´cu are available.  I also recommend to setup direnv to automatically enter a development shell whenever you are residing inside the repos directory structure:  echo &quot;use flake ./nix --impure&quot; &gt; .envrc   ","version":"Next","tagName":"h2"},{"title":"Website‚Äã","type":1,"pageTitle":"Development","url":"/docs/dev#website","content":" Please run the following commands to start a development server for the website:  # Ideally you use the Nix flake here to get a working Yarn/NodeJS setup cd website yarn start echo &quot;Test&quot;  ","version":"Next","tagName":"h2"},{"title":"Code of Conduct","type":0,"sectionRef":"#","url":"/docs/dev/coc","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Our Pledge‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#our-pledge","content":" We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.  We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.  ","version":"Next","tagName":"h2"},{"title":"Our Standards‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#our-standards","content":" Examples of behavior that contributes to a positive environment for our community include:  Demonstrating empathy and kindness toward other peopleBeing respectful of differing opinions, viewpoints, and experiencesGiving and gracefully accepting constructive feedbackAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experienceFocusing on what is best not just for us as individuals, but for the overall community  Examples of unacceptable behavior include:  The use of sexualized language or imagery, and sexual attention or advances of any kindTrolling, insulting or derogatory comments, and personal or political attacksPublic or private harassmentPublishing others' private information, such as a physical or email address, without their explicit permissionOther conduct which could reasonably be considered inappropriate in a professional setting  ","version":"Next","tagName":"h2"},{"title":"Enforcement Responsibilities‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#enforcement-responsibilities","content":" Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.  Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.  ","version":"Next","tagName":"h2"},{"title":"Scope‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#scope","content":" This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.  ","version":"Next","tagName":"h2"},{"title":"Enforcement‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#enforcement","content":" Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at info@cunicu.li. All complaints will be reviewed and investigated promptly and fairly.  All community leaders are obligated to respect the privacy and security of the reporter of any incident.  ","version":"Next","tagName":"h2"},{"title":"Enforcement Guidelines‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#enforcement-guidelines","content":" Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:  ","version":"Next","tagName":"h2"},{"title":"1. Correction‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#1-correction","content":" Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.  Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.  ","version":"Next","tagName":"h3"},{"title":"2. Warning‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#2-warning","content":" Community Impact: A violation through a single incident or series of actions.  Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.  ","version":"Next","tagName":"h3"},{"title":"3. Temporary Ban‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#3-temporary-ban","content":" Community Impact: A serious violation of community standards, including sustained inappropriate behavior.  Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.  ","version":"Next","tagName":"h3"},{"title":"Simple Example","type":0,"sectionRef":"#","url":"/docs/config/example-simple","content":"Simple Example The following example contains just the basic settings. You can find the file at: In a local installation: /etc/cunicu/cunicu.yamlIn the Git repo: etc/cunicu.yaml /etc/cunicu.yaml # SPDX-FileCopyrightText: 2023 Steffen Vogel &lt;post@steffenvogel.de&gt; # SPDX-License-Identifier: Apache-2.0 # This is an example of a simple cunicu configuration file. # For a full example please look at cunicu.advanced.yaml ## WireGuard interface settings # # These settings configure WireGuard specific settings # of the interface. # # The following settings can be overwritten for each interface # using the 'interfaces' settings (see below). # The following settings will be used as default. # A base64 private key generated by wg genkey. # Will be automatically generated if not provided. private_key: KLoqDLKgoqaUkwctTd+Ov3pfImOfadkkvTdPlXsuLWM= # The remote WireGuard peers provided as a dictionary # The keys of this dictionary are used as names for the peers peers: test: # A base64 public key calculated by wg pubkey from a private key, # and usually transmitted out of band # to the author of the configuration file. public_key: FlKHqqQQx+bTAq7+YhwEECwWRg2Ih7NQ48F/SeOYRH8= # A base64 pre-shared key generated by wg genpsk. # Optional, and may be omitted. # This option adds an additional layer of symmetric-key # cryptography to be mixed into the already existing # public-key cryptography, for post-quantum resistance. preshared_key: zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI= # An endpoint IP or hostname, followed by a colon, # and then a port number. This endpoint will be updated # automatically to the most recent source IP address and # port of correctly authenticated packets from the peer. # If provided, no endpoint discovery will be performed. endpoint: vpn.example.com:51820 # A time duration, between 1 and 65535s inclusive, of how # often to send an authenticated empty packet to the peer # for the purpose of keeping a stateful firewall or NAT mapping # valid persistently. For example, if the interface very rarely # sends traffic, but it might at anytime receive traffic from a # peer, and it is behind NAT, the interface might benefit from # having a persistent keepalive interval of 25 seconds. # If set to zero, this option is disabled. # By default or when unspecified, this option is off. # Most users will not need this. Optional. persistent_keepalive: 120s # A comma-separated list of IP (v4 or v6) addresses with # CIDR masks from which incoming traffic for this peer is # allowed and to which outgoing traffic for this peer is directed. # The catch-all 0.0.0.0/0 may be specified for matching # all IPv4 addresses, and ::/0 may be specified for matching # all IPv6 addresses. May be specified multiple times. allowed_ips: - 192.168.5.0/24 ## Basic interface settings # # The Maximum Transfer Unit of the WireGuard interface. # If not specified, the MTU is automatically determined from # the endpoint addresses or the system default route, # which is usually a sane choice. # However, to manually specify an MTU to override this # automatic discovery, this value may be specified explicitly. mtu: 1420 # A list of IP (v4 or v6) addresses (optionally with CIDR masks) # to be assigned to the interface. # May be specified multiple times. addresses: - 10.10.0.1/24 # A list of prefixes which cunicu uses to derive local addresses # from the interfaces public key prefixes: - fc2f:9a4d::/32 - 10.237.0.0/16 ## Peer discovery # # Peer discovery finds new peers within the same community and adds them to the respective interface discover_peers: true # The hostname which gets advertised to remote peers hostname: my-node # A passphrase shared among all peers of the same community community: &quot;some-common-password&quot; # Networks which are reachable via this peer and get advertised to remote peers # These will be part of this interfaces AllowedIPs at the remote peers. networks: - 192.168.1.0/24 - 10.2.0.0/24 ## Endpoint discovery # # Endpoint discovery uses Interactive Connectivity Establishment (ICE) as used by WebRTC to # gather a list of candidate endpoints and performs connectivity checks to find a suitable # endpoint address which can be used by WireGuard discover_endpoints: true ","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"4. Permanent Ban‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#4-permanent-ban","content":" Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.  Consequence: A permanent ban from any sort of public interaction within the community.  ","version":"Next","tagName":"h3"},{"title":"Attribution‚Äã","type":1,"pageTitle":"Code of Conduct","url":"/docs/dev/coc#attribution","content":" This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available athttps://www.contributor-covenant.org/version/2/1/code_of_conduct.html.  Community Impact Guidelines were inspired byMozilla's code of conduct enforcement ladder.  For answers to common questions about this code of conduct, see the FAQ athttps://www.contributor-covenant.org/faq. Translations are available athttps://www.contributor-covenant.org/translations. ","version":"Next","tagName":"h2"},{"title":"Contributions","type":0,"sectionRef":"#","url":"/docs/dev/contributions","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Guidelines‚Äã","type":1,"pageTitle":"Contributions","url":"/docs/dev/contributions#guidelines","content":" We have adopted the Contributor Covenant as our code of conduct We expect you to adopt these rules and norms when interacting with the communityPlease report any incidents to info@cunicu.li or apprach @stv0g Please use the GitHub pull request (PR) workflow to contribute your changes. Make sure all Continuous Integration (CI) checks are passing before marking your PR as ready. Please discuss larger changes with the community first.  ","version":"Next","tagName":"h2"},{"title":"Further Reading‚Äã","type":1,"pageTitle":"Contributions","url":"/docs/dev/contributions#further-reading","content":" GitHub's Open Source Guide: How to Contribute to Open Source ","version":"Next","tagName":"h2"},{"title":"Proxying","type":0,"sectionRef":"#","url":"/docs/dev/proxying","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Kernel WireGuard module‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#kernel-wireguard-module","content":" ","version":"Next","tagName":"h2"},{"title":"User-space‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#user-space","content":" For each WG peer a new local UDP socket is opened. cunƒ´cu will update the endpoint address of the peer to this the local address of the new sockets.  WireGuard traffic is proxied by cunƒ´cu between the local UDP and the ICE socket.  ","version":"Next","tagName":"h3"},{"title":"RAW Sockets + BPF filter (Kernel)‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#raw-sockets--bpf-filter-kernel","content":" We allocate a single Linux RAW socket and assign a eBPF filter to this socket which will only match STUN traffic to a specific UDP port. UDP headers are parsed/produced by cunƒ´cu. cunƒ´cu uses a UDPMux to mux all peers ICE Agents over this single RAW socket.  ","version":"Next","tagName":"h3"},{"title":"NFtables port-redirection (Kernel)‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#nftables-port-redirection-kernel","content":" Two Nftables (nft) rules are added to filter input &amp; output chains respectively. The input rule will match all non-STUN traffic directed at the local port of the ICE candidate and rewrites the UDP destination port to the local listen port of the WireGuard interface. The output rule will mach all traffic originating from the listen port of the WG interface and directed to the port of the remote candidate and rewrites the source port to the port of the local ICE candidate.  WireGuard traffic passes only through the Netfilter chains and remains inside the kernel. Only STUN binding requests are passed to cunƒ´cu.  $ sudo nft list ruleset table inet cunicu { chain ingress { type filter hook input priority raw; policy accept; udp dport 37281 @th,96,32 != 554869826 notrack udp dport set 1001 } chain egress { type filter hook output priority raw; policy accept; udp sport 1001 udp dport 38767 notrack udp sport set 37281 } }   ","version":"Next","tagName":"h3"},{"title":"IPTables port-redirection‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#iptables-port-redirection","content":" Similar to NFTables port-natting by using the legacy IPTables API.  ","version":"Next","tagName":"h2"},{"title":"User-space WireGuard implementation‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#user-space-wireguard-implementation","content":" ","version":"Next","tagName":"h2"},{"title":"User-space Proxy‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#user-space-proxy","content":" Just like for the Kernel WireGuard module, a dedicated UDP socket for each WG peer is created. cunƒ´cu will update the endpoint address of the peer to this the local address of the new sockets.  WireGuard traffic is proxied by cunƒ´cu between the local UDP and the ICE socket.  ","version":"Next","tagName":"h3"},{"title":"In-process socket‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#in-process-socket","content":" cunƒ´cu implements wireguard-go's conn.Bind interface to handle WireGuard's network IO.  WireGuard traffic is passed directly between conn.Bind and Pion's ice.Conn. No round-trip through the kernel stack is required.  note This variant only works for the compiled-in version of wireguard-go in cunƒ´cu.  ","version":"Next","tagName":"h3"},{"title":"Flowchart‚Äã","type":1,"pageTitle":"Proxying","url":"/docs/dev/proxying#flowchart","content":"  ","version":"Next","tagName":"h2"},{"title":"Session Signaling","type":0,"sectionRef":"#","url":"/docs/dev/signaling","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Project Structure","type":0,"sectionRef":"#","url":"/docs/dev/structure","content":"Project Structure This page summarizes the structure of the cunicu project and its related sub-projects:","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Session Description‚Äã","type":1,"pageTitle":"Session Signaling","url":"/docs/dev/signaling#session-description","content":" Session descriptions are exchanged by one or more the signaling backends via signaling envelopes which contain signaling messages. The envelopes are containers which encrypt the carried message via asymmetric cryptography using the public key of the recipient.  Both the envelope and the message are serialized using Protobuf.  Checkout the pkg/pb/signaling.proto for details.  ","version":"Next","tagName":"h2"},{"title":"Backends‚Äã","type":1,"pageTitle":"Session Signaling","url":"/docs/dev/signaling#backends","content":" cunƒ´cu can support multiple backends for signaling session information such as session IDs, ICE candidates, public keys and STUN credentials.  ","version":"Next","tagName":"h2"},{"title":"Available backends‚Äã","type":1,"pageTitle":"Session Signaling","url":"/docs/dev/signaling#available-backends","content":" gRPCKubernetes API server  For the use within a Kubernetes cluster also a dedicated backend using the Kubernetes api-server is available. Checkout the Backend interface for implementing your own backend.  ","version":"Next","tagName":"h3"},{"title":"Semantics‚Äã","type":1,"pageTitle":"Session Signaling","url":"/docs/dev/signaling#semantics","content":" A backend must:  Must facilitate a reliable delivery envelopes between peers using their public keys as addresses.Must support delivery of envelopes to a group of recipients (e.g. multicast).May deliver the envelopes out-of-order.May discard envelopes if the recipient is not yet known or reachable.Shall be stateless. It shall not buffer or record any envelopes.  ","version":"Next","tagName":"h3"},{"title":"Interface‚Äã","type":1,"pageTitle":"Session Signaling","url":"/docs/dev/signaling#interface","content":" All signaling backends implement the rather simple signaling.Backend interface:  type Message = pb.SignalingMessage type MessageHandler interface { OnSignalingMessage(*crypto.PublicKeyPair, *Message) } type Backend interface { io.Closer // Publish a signaling message to a specific peer Publish(ctx context.Context, kp *crypto.KeyPair, msg *Message) error // Subscribe to messages send by a specific peer Subscribe(ctx context.Context, kp *crypto.KeyPair, h MessageHandler) (bool, error) // Unsubscribe from messages send by a specific peer Unsubscribe(ctx context.Context, kp *crypto.KeyPair, h MessageHandler) (bool, error) // Returns the backends type identifier Type() signalingproto.BackendType }  ","version":"Next","tagName":"h3"},{"title":"Features","type":0,"sectionRef":"#","url":"/docs/features","content":"Features The cunƒ´cu daemon supports many features which are implemented by separate software modules/packages. This structure promotes the separation of concerns within the code-base and allows for use-cases in which only subsets of features are used. E.g. we can use cunƒ´cu for the post-quantum safe exchange of pre-shared keys without any of the other features like peer or endpoint discovery. With very few exceptions all of the features listed below can be used separately. Currently, the following features are implemented as separate modules: Auto-configuration of missing interface settings and link-local IP addresses (autocfg)Config Synchronization (cfgsync)Peer Discovery (pdisc)Endpoint Discovery (epdisc)Hooks (hooks)Hosts-file Synchronization (hsync)Pre-shared Key Establishment (pske)Route Synchronization (rtsync)","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Config Synchronization","type":0,"sectionRef":"#","url":"/docs/features/cfgsync","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Config Synchronization","url":"/docs/features/cfgsync#configuration","content":" The following settings can be used in the main section of the configuration file or with-in the interfaces section to customize settings of an individual interface.    sync_config boolean (Config Synchronization) Enable config synchronization. watch_config boolean (Watch Configuration Files) Keep watching for changes in the configuration and apply them on-the-fly Copy { &quot;sync_config&quot;: true, &quot;watch_config&quot;: true } ","version":"Next","tagName":"h2"},{"title":"JSON Schema","type":0,"sectionRef":"#","url":"/docs/config/schema","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Editor / Language Server support‚Äã","type":1,"pageTitle":"JSON Schema","url":"/docs/config/schema#editor--language-server-support","content":" Redhat's YAML Visual Studio Code extension provides comprehensive YAML Language support, via the yaml-language-server.  It provides completion, validation and code lenses based on JSON Schemas.  To make use of it, you need to associate your config file with the JSON Schema by adding the following line into your config:  # yaml-language-server: $schema=https://cunicu.li/schemas/config.yaml --- watch_interval: 1s   ","version":"Next","tagName":"h2"},{"title":"Reference‚Äã","type":1,"pageTitle":"JSON Schema","url":"/docs/config/schema#reference","content":" Here is a rendered reference based on this schema:    watch_interval string (Duration) (\\d+(\\.\\d)?(ns|us|¬µs|ms|s|m|h))+ An interval at which cunƒ´cu will periodically check for added, removed or modified WireGuard interfaces. backends Array of strings &lt;uri&gt; (Signaling backends) [ items &lt;uri &gt; ] Default: [&quot;grpc://signal.cunicu.li:443&quot;] These backends are used for exchanging control-plane messages between the peers. Examples of the exchanged information are ICE candidates or peer information. rpc object (RPC Settings) Settings for controlling cunƒ´cu via the CLI. log object (Logging Settings) Settings of logging system. mtu number (MTU) The Maximum Transmission Unit (MTU) of the WireGuard interface. If not specified, the MTU is automatically determined from the endpoint addresses or the system default route, which is usually a sane choice. However, to manually specify an MTU to override this automatic discovery, this value may be specified explicitly. addresses Array of strings (Addresses) A list of IP (v4 or v6) addresses (optionally with CIDR masks) to be assigned to the interface. prefixes Array of strings (Prefixes) A list of prefixes which cunƒ´cu uses to derive local addresses from the interfaces public key. dns Array of IP Address (any) or IP Address (any) (DNS Servers) A list of IP (v4 or v6) addresses to be set as the interface's DNS servers, or non-IP hostnames to be set as the interface's DNS search domains. Upon bringing the interface up, this runs resolvconf -a tun.INTERFACE -m 0 -x and upon bringing it down, this runs resolvconf -d tun.INTERFACE. If these particular invocations of resolvconf(8) are undesirable, custom hooks can be used instead. private_key string (Base64Key) [^-A-Za-z0-9+/=]|=[^=]|={3,}$ A base64 encoded WireGuard private key. This key can be generated via the wg genkey command. Will be automatically generated if not provided. userspace boolean (Use userspace WireGuard implementation) Default: false Create WireGuard interfaces using bundled wireguard-go user space implementation. This will be the default if there is no WireGuard kernel module present. listen_port_range object (Listen Port Range) A range constraint for an automatically assigned selected listen port. If the interface has no listen port specified, cunƒ´cu will use the first available port from this range. listen_port integer (Listen Port) [ 0 .. 65535 ] Default: 51820 An UDP port for listening. If not specified, first available port from listen_port_range will be used. fwmark integer (Firewall Mark) A 32-bit firewall mark for outgoing packets which can be used for Netfilter or Traffic Control (TC) classification. If set to 0, this option is disabled. May be specified in hexadecimal by prepending 0x. peers object (WireGuard peer) The remote WireGuard peers provided as a dictionary. The keys of this dictionary are used as names for the peers. sync_routes boolean (Route Synchronization) Default: true Enable route synchronization. routing_table integer (Kernel Routing Table) Default: 254 Kernel routing table which is used. On Linux, see /etc/iproute2/rt_tables for table ids and names watch_routes boolean (Watch Routes) Default: true Keep watching the for changes in the kernel routing table via netlink multicast group. sync_config boolean (Config Synchronization) Enable config synchronization. watch_config boolean (Watch Configuration Files) Keep watching for changes in the configuration and apply them on-the-fly sync_hosts boolean (/etc/hosts Synchronization) Default: true Enable hosts file synchronization. domain string (Domain) The domain name which is appended to each of the peer host names discover_peers boolean (Peer Discovery) Default: true Enable/disable peer discovery. hostname string &lt;hostname&gt; (Hostname) The hostname which gets advertised to remote peers. community string (Community) non-empty A passphrase shared among all peers of the same community. networks Array of strings (Networks) Networks which are reachable via this peer and get advertised to remote peers. These will be part of this interfaces AllowedIPs at the remote peers. whitelist Array of strings (Peer Whitelist) [[^-A-Za-z0-9+/=]|=[^=]|={3,}$] A list of WireGuard public keys which are accepted peers. If not configured, all peers will be accepted. blacklist Array of strings (Peer Blacklist) [[^-A-Za-z0-9+/=]|=[^=]|={3,}$] A list of WireGuard public keys which are rejected as peers. discover_endpoints boolean (Endpoint Discovery) Default: true Enable/disable endpoint discovery. ice object (IceSettings) Interactive Connectivity Establishment (ICE) parameters. hooks Array of Web Hook Settings (object) or Sub-process Hook (object) (Hook Settings) interfaces object (Interface specific settings / overwrites) Most of the top-level settings of this configuration file can be customized for specific interfaces. The keys of the 'interfaces' dictionary are glob(7) patterns which will be matched against the interface names. Settings are overlayed in the order in which the keys are provided in the interface map. Multiple patterns are supported and evaluated in the order they a defined in the configuration file. Keys which are not a glob(7) pattern, will be created as new interfaces if they do not exist already in the system. Copy Expand all Collapse all { &quot;watch_interval&quot;: &quot;300ms&quot;, &quot;backends&quot;: [ &quot;grpc://signal.cunicu.li:443&quot; ], &quot;rpc&quot;: { &quot;socket&quot;: &quot;/var/run/cunicu.sock&quot;, &quot;wait&quot;: false }, &quot;log&quot;: { &quot;banner&quot;: true, &quot;color&quot;: &quot;auto&quot;, &quot;file&quot;: &quot;/var/log/cunicu.log&quot;, &quot;level&quot;: &quot;debug2&quot;, &quot;rules&quot;: [ &quot;debug5:watcher,daemon&quot; ] }, &quot;mtu&quot;: 1420, &quot;addresses&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;prefixes&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;dns&quot;: [ { } ], &quot;private_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;userspace&quot;: false, &quot;listen_port_range&quot;: { &quot;min&quot;: 52820, &quot;max&quot;: 65535 }, &quot;listen_port&quot;: 51820, &quot;fwmark&quot;: 4096, &quot;peers&quot;: { &quot;property1&quot;: { &quot;public_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key_passphrase&quot;: &quot;theifo1we1Ayahth&quot;, &quot;endpoint&quot;: &quot;192.0.2.1:51820&quot;, &quot;persistent_keepalive&quot;: &quot;300ms&quot;, &quot;allowed_ips&quot;: [ &quot;fc2f:9a4d::/32&quot; ] }, &quot;property2&quot;: { &quot;public_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key_passphrase&quot;: &quot;theifo1we1Ayahth&quot;, &quot;endpoint&quot;: &quot;192.0.2.1:51820&quot;, &quot;persistent_keepalive&quot;: &quot;300ms&quot;, &quot;allowed_ips&quot;: [ &quot;fc2f:9a4d::/32&quot; ] } }, &quot;sync_routes&quot;: true, &quot;routing_table&quot;: 254, &quot;watch_routes&quot;: true, &quot;sync_config&quot;: true, &quot;watch_config&quot;: true, &quot;sync_hosts&quot;: true, &quot;domain&quot;: &quot;wg-local&quot;, &quot;discover_peers&quot;: true, &quot;hostname&quot;: &quot;my-node&quot;, &quot;community&quot;: &quot;some-common-password&quot;, &quot;networks&quot;: [ &quot;192.168.1.0/24&quot; ], &quot;whitelist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ], &quot;blacklist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ], &quot;discover_endpoints&quot;: true, &quot;ice&quot;: { &quot;urls&quot;: [ &quot;grpc://relay.cunicu.li&quot; ], &quot;username&quot;: &quot;string&quot;, &quot;password&quot;: &quot;string&quot;, &quot;insecure_skip_verify&quot;: false, &quot;network_types&quot;: [ &quot;udp4&quot; ], &quot;candidate_types&quot;: [ &quot;host&quot; ], &quot;interface_filter&quot;: &quot;eth*&quot;, &quot;lite&quot;: true, &quot;mdns&quot;: false, &quot;max_binding_requests&quot;: 7, &quot;nat_1to1_ips&quot;: [ { } ], &quot;port_range&quot;: { &quot;min&quot;: 49152, &quot;max&quot;: 65535 }, &quot;check_interval&quot;: &quot;300ms&quot;, &quot;disconnected_timeout&quot;: &quot;300ms&quot;, &quot;failed_timeout&quot;: &quot;300ms&quot;, &quot;restart_timeout&quot;: &quot;300ms&quot;, &quot;keepalive_interval&quot;: &quot;300ms&quot; }, &quot;hooks&quot;: [ { &quot;type&quot;: &quot;web&quot;, &quot;url&quot;: &quot;https://my-webhook-endpoint.com/api/v1/webhook&quot;, &quot;method&quot;: &quot;DELETE&quot;, &quot;headers&quot;: { &quot;Content-type&quot;: &quot;application/json&quot; } } ], &quot;interfaces&quot;: { &quot;property1&quot;: { &quot;mtu&quot;: 1420, &quot;addresses&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;prefixes&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;dns&quot;: [ { } ], &quot;private_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;userspace&quot;: false, &quot;listen_port_range&quot;: { &quot;min&quot;: 52820, &quot;max&quot;: 65535 }, &quot;listen_port&quot;: 51820, &quot;fwmark&quot;: 4096, &quot;peers&quot;: { &quot;property1&quot;: { &quot;public_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key_passphrase&quot;: &quot;theifo1we1Ayahth&quot;, &quot;endpoint&quot;: &quot;192.0.2.1:51820&quot;, &quot;persistent_keepalive&quot;: &quot;300ms&quot;, &quot;allowed_ips&quot;: [ &quot;fc2f:9a4d::/32&quot; ] }, &quot;property2&quot;: { &quot;public_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key_passphrase&quot;: &quot;theifo1we1Ayahth&quot;, &quot;endpoint&quot;: &quot;192.0.2.1:51820&quot;, &quot;persistent_keepalive&quot;: &quot;300ms&quot;, &quot;allowed_ips&quot;: [ &quot;fc2f:9a4d::/32&quot; ] } }, &quot;sync_routes&quot;: true, &quot;routing_table&quot;: 254, &quot;watch_routes&quot;: true, &quot;sync_config&quot;: true, &quot;watch_config&quot;: true, &quot;sync_hosts&quot;: true, &quot;domain&quot;: &quot;wg-local&quot;, &quot;discover_peers&quot;: true, &quot;hostname&quot;: &quot;my-node&quot;, &quot;community&quot;: &quot;some-common-password&quot;, &quot;networks&quot;: [ &quot;192.168.1.0/24&quot; ], &quot;whitelist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ], &quot;blacklist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ], &quot;discover_endpoints&quot;: true, &quot;ice&quot;: { &quot;urls&quot;: [ &quot;grpc://relay.cunicu.li&quot; ], &quot;username&quot;: &quot;string&quot;, &quot;password&quot;: &quot;string&quot;, &quot;insecure_skip_verify&quot;: false, &quot;network_types&quot;: [ &quot;udp4&quot; ], &quot;candidate_types&quot;: [ &quot;host&quot; ], &quot;interface_filter&quot;: &quot;eth*&quot;, &quot;lite&quot;: true, &quot;mdns&quot;: false, &quot;max_binding_requests&quot;: 7, &quot;nat_1to1_ips&quot;: [ { } ], &quot;port_range&quot;: { &quot;min&quot;: 49152, &quot;max&quot;: 65535 }, &quot;check_interval&quot;: &quot;300ms&quot;, &quot;disconnected_timeout&quot;: &quot;300ms&quot;, &quot;failed_timeout&quot;: &quot;300ms&quot;, &quot;restart_timeout&quot;: &quot;300ms&quot;, &quot;keepalive_interval&quot;: &quot;300ms&quot; }, &quot;hooks&quot;: [ { &quot;type&quot;: &quot;web&quot;, &quot;url&quot;: &quot;https://my-webhook-endpoint.com/api/v1/webhook&quot;, &quot;method&quot;: &quot;DELETE&quot;, &quot;headers&quot;: { &quot;Content-type&quot;: &quot;application/json&quot; } } ] }, &quot;property2&quot;: { &quot;mtu&quot;: 1420, &quot;addresses&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;prefixes&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;dns&quot;: [ { } ], &quot;private_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;userspace&quot;: false, &quot;listen_port_range&quot;: { &quot;min&quot;: 52820, &quot;max&quot;: 65535 }, &quot;listen_port&quot;: 51820, &quot;fwmark&quot;: 4096, &quot;peers&quot;: { &quot;property1&quot;: { &quot;public_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key_passphrase&quot;: &quot;theifo1we1Ayahth&quot;, &quot;endpoint&quot;: &quot;192.0.2.1:51820&quot;, &quot;persistent_keepalive&quot;: &quot;300ms&quot;, &quot;allowed_ips&quot;: [ &quot;fc2f:9a4d::/32&quot; ] }, &quot;property2&quot;: { &quot;public_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key&quot;: &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot;, &quot;preshared_key_passphrase&quot;: &quot;theifo1we1Ayahth&quot;, &quot;endpoint&quot;: &quot;192.0.2.1:51820&quot;, &quot;persistent_keepalive&quot;: &quot;300ms&quot;, &quot;allowed_ips&quot;: [ &quot;fc2f:9a4d::/32&quot; ] } }, &quot;sync_routes&quot;: true, &quot;routing_table&quot;: 254, &quot;watch_routes&quot;: true, &quot;sync_config&quot;: true, &quot;watch_config&quot;: true, &quot;sync_hosts&quot;: true, &quot;domain&quot;: &quot;wg-local&quot;, &quot;discover_peers&quot;: true, &quot;hostname&quot;: &quot;my-node&quot;, &quot;community&quot;: &quot;some-common-password&quot;, &quot;networks&quot;: [ &quot;192.168.1.0/24&quot; ], &quot;whitelist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ], &quot;blacklist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ], &quot;discover_endpoints&quot;: true, &quot;ice&quot;: { &quot;urls&quot;: [ &quot;grpc://relay.cunicu.li&quot; ], &quot;username&quot;: &quot;string&quot;, &quot;password&quot;: &quot;string&quot;, &quot;insecure_skip_verify&quot;: false, &quot;network_types&quot;: [ &quot;udp4&quot; ], &quot;candidate_types&quot;: [ &quot;host&quot; ], &quot;interface_filter&quot;: &quot;eth*&quot;, &quot;lite&quot;: true, &quot;mdns&quot;: false, &quot;max_binding_requests&quot;: 7, &quot;nat_1to1_ips&quot;: [ { } ], &quot;port_range&quot;: { &quot;min&quot;: 49152, &quot;max&quot;: 65535 }, &quot;check_interval&quot;: &quot;300ms&quot;, &quot;disconnected_timeout&quot;: &quot;300ms&quot;, &quot;failed_timeout&quot;: &quot;300ms&quot;, &quot;restart_timeout&quot;: &quot;300ms&quot;, &quot;keepalive_interval&quot;: &quot;300ms&quot; }, &quot;hooks&quot;: [ { &quot;type&quot;: &quot;web&quot;, &quot;url&quot;: &quot;https://my-webhook-endpoint.com/api/v1/webhook&quot;, &quot;method&quot;: &quot;DELETE&quot;, &quot;headers&quot;: { &quot;Content-type&quot;: &quot;application/json&quot; } } ] } } } ","version":"Next","tagName":"h2"},{"title":"Auto-configuration","type":0,"sectionRef":"#","url":"/docs/features/autocfg","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Link local IP-addresses‚Äã","type":1,"pageTitle":"Auto-configuration","url":"/docs/features/autocfg#link-local-ip-addresses","content":" This feature automatically assigns each interface link-local IPv4 and IPv6 addresses derived from the interface's public key.  This enables peer-to-peer communication when no site-local or global addresses are assigned yet.  ","version":"Next","tagName":"h2"},{"title":"Address calculation‚Äã","type":1,"pageTitle":"Auto-configuration","url":"/docs/features/autocfg#address-calculation","content":" Addresses are generated by concatenating a well-known network prefix (fe80::/64, 169.254.0.0/16) with an host part derived from the public key PKPKPK of the peer/interface using the 64-bit SipHash64\\mathrm{SipHash}_{64}SipHash64‚Äã hashing function:  H¬†=¬†SipHash64(PK)Hfold¬†=¬†(H‚àß0xFFFF)‚äº(H‚â´16)IPv6link‚àílocal¬†=¬†{fe80:¬†‚à£‚à£¬†H¬†}/64IPv4link‚àílocal¬†=¬†{169.254.¬†‚à£‚à£¬†Hfold¬†}/16\\begin{align} H~=&amp;~\\mathrm{SipHash}_{64}(PK) \\\\ H_{fold}~=&amp;~(H \\land \\mathrm{0xFFFF}) \\barwedge (H \\gg 16) \\\\ \\mathrm{IPv6}_{link-local}~=&amp;~\\{ \\mathrm{fe80:}~||~H~\\} /64 \\\\ \\mathrm{IPv4}_{link-local}~=&amp;~\\{ \\mathrm{169.254.}~||~H_{fold}~\\}/16 \\\\ \\end{align}H¬†=Hfold‚Äã¬†=IPv6link‚àílocal‚Äã¬†=IPv4link‚àílocal‚Äã¬†=‚Äã¬†SipHash64‚Äã(PK)¬†(H‚àß0xFFFF)‚äº(H‚â´16)¬†{fe80:¬†‚à£‚à£¬†H¬†}/64¬†{169.254.¬†‚à£‚à£¬†Hfold‚Äã¬†}/16‚Äã‚Äã  This addresses calculation can be performed with the cunicu addresses sub-command.  ","version":"Next","tagName":"h3"},{"title":"Missing settings‚Äã","type":1,"pageTitle":"Auto-configuration","url":"/docs/features/autocfg#missing-settings","content":" The following settings are automatically assigned if they have not been set before:  Private Key: a new random private key will be generated.Listen port: the next free port in the configured listen port range is used (see wireguard.listen_port_range setting).MTU: is automatically determined from the endpoint addresses or the system default route.  ","version":"Next","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Auto-configuration","url":"/docs/features/autocfg#configuration","content":" The following settings can be used in the main section of the configuration file or with-in the interfaces section to customize settings of an individual interface.    mtu number (MTU) The Maximum Transmission Unit (MTU) of the WireGuard interface. If not specified, the MTU is automatically determined from the endpoint addresses or the system default route, which is usually a sane choice. However, to manually specify an MTU to override this automatic discovery, this value may be specified explicitly. addresses Array of strings (Addresses) A list of IP (v4 or v6) addresses (optionally with CIDR masks) to be assigned to the interface. prefixes Array of strings (Prefixes) A list of prefixes which cunƒ´cu uses to derive local addresses from the interfaces public key. dns Array of IP Address (any) or IP Address (any) (DNS Servers) A list of IP (v4 or v6) addresses to be set as the interface's DNS servers, or non-IP hostnames to be set as the interface's DNS search domains. Upon bringing the interface up, this runs resolvconf -a tun.INTERFACE -m 0 -x and upon bringing it down, this runs resolvconf -d tun.INTERFACE. If these particular invocations of resolvconf(8) are undesirable, custom hooks can be used instead. Copy Expand all Collapse all { &quot;mtu&quot;: 1420, &quot;addresses&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;prefixes&quot;: [ &quot;fc2f:9a4d::/32&quot; ], &quot;dns&quot;: [ { } ] } ","version":"Next","tagName":"h2"},{"title":"Advanced Example","type":0,"sectionRef":"#","url":"/docs/config/example-advanced","content":"Advanced Example info Please also have a look at the JSON Schema for a full reference of available options/ The following file contains a full-featured set of cunƒ´cu's options. You can find the file at: In a local installation: /etc/cunicu/cunicu.advanced.yamlIn the Git repo: etc/cunicu.advanced.yaml /etc/cunicu.advanced.yaml # SPDX-FileCopyrightText: 2023 Steffen Vogel &lt;post@steffenvogel.de&gt; # SPDX-License-Identifier: Apache-2.0 # yaml-language-server: $schema=https://cunicu.li/schemas/config.yaml --- # An interval at which cunƒ´cu will periodically check for added, # removed or modified WireGuard interfaces. watch_interval: 1s ## Signaling backends # # These backends are used for exchanging control-plane messages # between the peers. # E.g. ICE candidates, Peer information backends: - grpc://signal.cunicu.li:443 # - grpc://localhost:8080?insecure=true&amp;skip_verify=true # RPC control socket settings rpc: # Path to a Unix socket for management # and monitoring of the cunicu daemon. socket: /var/run/cunicu.sock # Start of cunƒ´cu daemon will block until # its unblocked via the control socket. # Mostly useful for testing automation wait: false # Logging configuration log: # Show a banner during start of daemon banner: true # Use one of # - auto only colorize log output on TTYs # - never never colorize log output # - always always colorize log output color: auto # A path to a custom log file file: mylogfile.log # The standard log level level: info # Additional logging rules # Rule syntax: # # RULE: LEVELS:NAMESPACES # # LEVELS: LEVEL[,LEVELS] # LEVEL: one of # - SEVERITY for matching all levels with equal or higher severity # - &gt;SEVERITY for matching all levels with higher severity # - =SEVERITY for matching all levels with equal severity # - &lt;SEVERITY for matching all levels with lower severity # # SEVERITY: one of # - debug10..debug1 # - debug # - info # - warn # - error # - fatal # - panic # # NAMESPACES: NAMESPACE[,NAMESPACES] # NAMESPACE: one of # - namespace should be exactly this namespace # - *mat*ch* should match # - -NAMESPACE should not match a namespace rules: - debug5:watcher,daemon - debug6:epdisc.* #### Interface settings start here # The following settings can be overwritten for each interface # using the 'interfaces' settings (see below). # The following settings will be used as default. ## WireGuard interface settings # # These settings configure WireGuard specific settings # of the interface. # A base64 private key generated by wg genkey. # Will be automatically generated if not provided. private_key: KLoqDLKgoqaUkwctTd+Ov3pfImOfadkkvTdPlXsuLWM= # Create WireGuard interfaces using bundled wireguard-go # user space implementation. This will be the default # if there is no WireGuard kernel module present. userspace: false # A range constraint for an automatically assigned # selected listen port. # If the interface has no listen port specified, cunƒ´cu # will use the first available port from this range. listen_port_range: min: 52820 max: 65535 # A 16-bit port for listening. Optional; # If not specified, first available port from listen_port_range # will be used. listen_port: 51825 # A 32-bit fwmark for outgoing packets which can be used # for Netfilter or TC classification. # If set to 0 or &quot;off&quot;, this option is disabled. # May be specified in hexadecimal by prepending &quot;0x&quot;. Optional. fwmark: 0x1000 # The remote WireGuard peers provided as a dictionary # The keys of this dictionary are used as names for the peers peers: test: # A base64 public key calculated by wg pubkey from a private key, # and usually transmitted out of band # to the author of the configuration file. public_key: FlKHqqQQx+bTAq7+YhwEECwWRg2Ih7NQ48F/SeOYRH8= # A base64 pre-shared key generated by wg genpsk. # Optional, and may be omitted. # This option adds an additional layer of symmetric-key # cryptography to be mixed into the already existing # public-key cryptography, for post-quantum resistance. preshared_key: zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI= # A pre-shared passphrase which is used to derive a preshared key. # cunƒ´cu is using Argon2id as the key derivation function. preshared_key_passphrase: some-shared-passphrase # An endpoint IP or hostname, followed by a colon, # and then a port number. This endpoint will be updated # automatically to the most recent source IP address and # port of correctly authenticated packets from the peer. # If provided, no endpoint discovery will be performed. endpoint: vpn.example.com:51820 # A time duration, between 1 and 65535s inclusive, of how # often to send an authenticated empty packet to the peer # for the purpose of keeping a stateful firewall or NAT mapping # valid persistently. For example, if the interface very rarely # sends traffic, but it might at anytime receive traffic from a # peer, and it is behind NAT, the interface might benefit from # having a persistent keepalive interval of 25 seconds. # If set to zero, this option is disabled. # By default or when unspecified, this option is off. # Most users will not need this. Optional. persistent_keepalive: 120s # A comma-separated list of IP (v4 or v6) addresses with # CIDR masks from which incoming traffic for this peer is # allowed and to which outgoing traffic for this peer is directed. # The catch-all 0.0.0.0/0 may be specified for matching # all IPv4 addresses, and ::/0 may be specified for matching # all IPv6 addresses. May be specified multiple times. allowed_ips: - 192.168.5.0/24 ## Basic interface settings # # The Maximum Transfer Unit of the WireGuard interface. # If not specified, the MTU is automatically determined from # the endpoint addresses or the system default route, # which is usually a sane choice. # However, to manually specify an MTU to override this # automatic discovery, this value may be specified explicitly. mtu: 1420 # A list of IP (v4 or v6) addresses (optionally with CIDR masks) # to be assigned to the interface. # May be specified multiple times. addresses: - 10.10.0.1/24 # A list of prefixes which cunicu uses to derive local addresses # from the interfaces public key prefixes: - fc2f:9a4d::/32 - 10.237.0.0/16 # A list of IP (v4 or v6) addresses to be set as the interface's # DNS servers, or non-IP hostnames to be set as the interface's # DNS search domains. # May be specified multiple times. # Upon bringing the interface up, this runs `resolvconf -a tun.INTERFACE -m 0 -x` # and upon bringing it down, this runs `resolvconf -d tun.INTERFACE`. # If these particular invocations of resolvconf(8) are undesirable, # custom hooks can be used instead. dns: - 1.1.1.1 ## Config synchronization # # Synchronize local WireGuard interface configuration with wg(8) config-files. # Enable config synchronization sync_config: false # Keep watching for changes in the configuration and apply them on-the-fly watch_config: false ## Route Synchronization # # Synchronize the kernel routing table with WireGuard's AllowedIPs setting # # It checks for routes in the kernel routing table which have a peers address # as next-hop and adds those routes to the AllowedIPs setting of the respective peer. # # In reverse, also networks listed in a peers AllowedIPs setting will be installed as a # kernel route with the peers address as the routes next-hop. # Enable route synchronization sync_routes: true # Kernel routing table which is used # On Linux, see /etc/iproute2/rt_tables for table ids and names routing_table: 254 # Keep watching the for changes in the kernel routing table via netlink multicast group. watch_routes: true ## /etc/hosts synchronization # # Synchronizes the local /etc/hosts file with host names and addresses of connected peers. # Enable hosts file synchronization sync_hosts: true # The domain name which is appended to each of the peer host names domain: wg-local ## Peer discovery # # Peer discovery finds new peers within the same community and adds them to the respective interface # Enable/disable peer discovery discover_peers: true # The hostname which gets advertised to remote peers hostname: my-node # A passphrase shared among all peers of the same community community: &quot;some-common-password&quot; # Networks which are reachable via this peer and get advertised to remote peers # These will be part of this interfaces AllowedIPs at the remote peers. networks: - 192.168.1.0/24 - 10.2.0.0/24 # A list of WireGuard public keys which are accepted peers # If not configured, all peers will be accepted. whitelist: - coNsGPwVPdpahc8U+dbbWGzTAdCd6+1BvPIYg10wDCI= # A list if WireGuard public keys which are rejected as peers blacklist: - AOZzBaNsoV7P8vo0D5UmuIJUQ7AjMbHbGt2EA8eAuEc= ## Endpoint discovery # # Endpoint discovery uses Interactive Connectivity Establishment (ICE) as used by WebRTC to # gather a list of candidate endpoints and performs connectivity checks to find a suitable # endpoint address which can be used by WireGuard # Enable/disable endpoint discovery discover_endpoints: true # Interactive Connectivity Establishment (ICE) parameters ice: # A list of STUN and TURN servers used by ICE. urls: # Community provided STUN/TURN servers - grpc://relay.cunicu.li # Public STUN servers - stun:stun3.l.google.com:19302 - stun:relay.webwormhole.io - stun:stun.sipgate.net - stun:stun.ekiga.net - stun:stun.services.mozilla.com # Caution: OpenRelay servers are located in Ontario, Canada. # Beware of the latency! # See also: https://www.metered.ca/tools/openrelay/ # - turn:openrelayproject:openrelayproject@openrelay.metered.ca:80 # - turn:openrelayproject:openrelayproject@openrelay.metered.ca:443 # - turn:openrelayproject:openrelayproject@openrelay.metered.ca:443?transport=tcp # Credentials for STUN/TURN servers configured above. username: &quot;&quot; password: &quot;&quot; # Allow connections to STUNS/TURNS servers for which we can not validate TLS certificates. insecure_skip_verify: false # Limit available network and candidate types. # network_types: [udp4, udp6, tcp4, tcp6] # candidate_types: [host, srflx, prflx, relay] # A glob(7) pattern to match interfaces against which are used to gather ICE candidates (e.g. \\&quot;eth[0-9]\\&quot;). interface_filter: &quot;*&quot; # Lite agents do not perform connectivity check and only provide host candidates. lite: false # Enable local Multicast DNS discovery. mdns: false # Sets the max amount of binding requests the agent will send over a candidate pair for validation or nomination. # If after the the configured number, the candidate is yet to answer a binding request or a nomination we set the pair as failed. max_binding_requests: 7 # SetNAT1To1IPs sets a list of external IP addresses of 1:1 (D)NAT and a candidate type for which the external IP address is used. # This is useful when you are host a server using Pion on an AWS EC2 instance which has a private address, behind a 1:1 DNAT with a public IP (e.g. Elastic IP). # In this case, you can give the public IP address so that Pion will use the public IP address in its candidate instead of the private IP address. # nat_1to1_ips: # - 10.10.2.3 # Limit the port range used by ICE port_range: # Minimum port for allocation policy for ICE sockets (range: 0-65535) min: 49152 # Maximum port for allocation policy for ICE sockets (range: 0-65535) max: 65535 # Interval at which the agent performs candidate checks in the connecting phase check_interval: 200ms # Time until an Agent transitions disconnected. # If the duration is 0, the ICE Agent will never go to disconnected disconnected_timeout: 5s # Time until an Agent transitions to failed after disconnected # If the duration is 0, we will never go to failed. failed_timeout: 5s # Time to wait before ICE restart restart_timeout: 5s # Interval between STUN keepalives (should be less then connection timeout above). # Af the interval is 0, we never send keepalive packets keepalive_interval: 2s ## Hook callbacks # # Hook callback can be used to invoke subprocesses # or web-hooks on certain events within cunƒ´cu. hooks: # An 'exec' hook spawn a subprocess for each event. - type: exec command: ../../scripts/hook.sh # Prepend additional arguments args: [] # Pass JSON object via Stdin to command stdin: true # Set environment variables for invocation env: COLOR: &quot;1&quot; # A 'web' hook performs HTTP requests for each event. - type: web # URL of the webhook endpoint url: https://my-webhook-endpoint.com/api/v1/webhook # HTTP method of the request method: POST # Additional HTTP headers which are used for the requests headers: User-Agent: ahoi Authorization: Bearer XXXXXX ## Interface specific settings / overwrites. # # Most of the top-level settings of this configuration file can be customized # for specific interfaces. # # The keys of the 'interfaces' dictionary are glob(7) patterns which will be # matched against the interface names. # Settings are overlayed in the order in which the keys are provided in the # interface map. # # Keys which are not a glob(8) pattern, will be created as new interfaces if # they do not exist already in the system. interfaces: # A simple interface specific setting # cunicu will set the private key of interface 'wg0' to the provided value. wg0: discover_endpoints: false # No settings are overwritten. But since this is not a glob pattern, # A new interface named 'wg1' will be created if it does not exist yet. # The same applies to the previous interface 'wg0' wg1: {} # Create a new interface using the wireguard-go user-space implementation. wg2: userspace: true # This pattern configuration will be applied to all interfaces which match the pattern. # This rule will not create any new interfaces. wg-work-*: community: &quot;mysecret-pass&quot; ice: urls: - turn:mysecret.turn-server.com # Multiple patterns are supported and evaluated in the order they a defined in the configuration file. # wg-work-external-*: ice: network_types: [ udp6 ] ","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Hosts-file Synchronization","type":0,"sectionRef":"#","url":"/docs/features/hsync","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Example‚Äã","type":1,"pageTitle":"Hosts-file Synchronization","url":"/docs/features/hsync#example","content":" The following snippet shows the local hosts file of an Ubuntu 20.04 system with two entries added by cunicu. As shown here, all entries managed by cunicu are marked with a comment prefixed with # cunicu:  /etc/hosts 127.0.0.1 localhost 127.0.1.1 ubuntu # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters fe80::13a9:c799:cead:4f28 buxfBfaN.wg-local fra-1.wg-local # cunicu: ifname=wg0, ifindex=9, pk=buxfBfaNZI8UFT0cB1aj9YanhbLfxlTfd/hH3DrGaFA= fe80::1fed:fabb:a9f6:d78 ZEki/XKE.wg-local # cunicu: ifname=wg1, ifindex=10, pk=ZEki/XKEsqdjFyURo5Sm+g3vXSKJKpV5WmwWKAQqo2c=   ","version":"Next","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Hosts-file Synchronization","url":"/docs/features/hsync#configuration","content":" The following settings can be used in the main section of the configuration file or with-in the interfaces section to customize settings of an individual interface.    sync_hosts boolean (/etc/hosts Synchronization) Default: true Enable hosts file synchronization. domain string (Domain) The domain name which is appended to each of the peer host names Copy { &quot;sync_hosts&quot;: true, &quot;domain&quot;: &quot;wg-local&quot; } ","version":"Next","tagName":"h2"},{"title":"Hooks","type":0,"sectionRef":"#","url":"/docs/features/hooks","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Hooks","url":"/docs/features/hooks#configuration","content":" The following settings can be used in the main section of the configuration file or with-in the interfaces section to customize settings of an individual interface.    hooks Array of Web Hook Settings (object) or Sub-process Hook (object) (Hook Settings) Copy Expand all Collapse all { &quot;hooks&quot;: [ { &quot;type&quot;: &quot;web&quot;, &quot;url&quot;: &quot;https://my-webhook-endpoint.com/api/v1/webhook&quot;, &quot;method&quot;: &quot;DELETE&quot;, &quot;headers&quot;: { &quot;Content-type&quot;: &quot;application/json&quot; } } ] } ","version":"Next","tagName":"h2"},{"title":"Endpoint Discovery","type":0,"sectionRef":"#","url":"/docs/features/epdisc","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Endpoint Discovery","url":"/docs/features/epdisc#configuration","content":" The following settings can be used in the main section of the configuration file or with-in the interfaces section to customize settings of an individual interface.    discover_endpoints boolean (Endpoint Discovery) Default: true Enable/disable endpoint discovery. ice object (IceSettings) Interactive Connectivity Establishment (ICE) parameters. Copy Expand all Collapse all { &quot;discover_endpoints&quot;: true, &quot;ice&quot;: { &quot;urls&quot;: [ &quot;grpc://relay.cunicu.li&quot; ], &quot;username&quot;: &quot;string&quot;, &quot;password&quot;: &quot;string&quot;, &quot;insecure_skip_verify&quot;: false, &quot;network_types&quot;: [ &quot;udp4&quot; ], &quot;candidate_types&quot;: [ &quot;host&quot; ], &quot;interface_filter&quot;: &quot;eth*&quot;, &quot;lite&quot;: true, &quot;mdns&quot;: false, &quot;max_binding_requests&quot;: 7, &quot;nat_1to1_ips&quot;: [ { } ], &quot;port_range&quot;: { &quot;min&quot;: 49152, &quot;max&quot;: 65535 }, &quot;check_interval&quot;: &quot;300ms&quot;, &quot;disconnected_timeout&quot;: &quot;300ms&quot;, &quot;failed_timeout&quot;: &quot;300ms&quot;, &quot;restart_timeout&quot;: &quot;300ms&quot;, &quot;keepalive_interval&quot;: &quot;300ms&quot; } } ","version":"Next","tagName":"h2"},{"title":"Funding acknowledgement","type":0,"sectionRef":"#","url":"/docs/funding","content":"Funding acknowledgement The project has been initiated by Steffen Vogel while working at the Institute for Automation of Complex Power Systems (ACS) of RWTH Aachen University. The development of cunƒ´cu has been supported by the ERIGrid 2.0 project of the H2020 Programme under Grant Agreement No. 870620","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Pre-shared Key Establishment","type":0,"sectionRef":"#","url":"/docs/features/pske","content":"Pre-shared Key Establishment info üöß This page is under construction","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Peer Discovery","type":0,"sectionRef":"#","url":"/docs/features/pdisc","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Peer Discovery","url":"/docs/features/pdisc#configuration","content":" The following settings can be used in the main section of the configuration file or with-in the interfaces section to customize settings of an individual interface.    discover_peers boolean (Peer Discovery) Default: true Enable/disable peer discovery. hostname string &lt;hostname&gt; (Hostname) The hostname which gets advertised to remote peers. community string (Community) non-empty A passphrase shared among all peers of the same community. networks Array of strings (Networks) Networks which are reachable via this peer and get advertised to remote peers. These will be part of this interfaces AllowedIPs at the remote peers. whitelist Array of strings (Peer Whitelist) [[^-A-Za-z0-9+/=]|=[^=]|={3,}$] A list of WireGuard public keys which are accepted peers. If not configured, all peers will be accepted. blacklist Array of strings (Peer Blacklist) [[^-A-Za-z0-9+/=]|=[^=]|={3,}$] A list of WireGuard public keys which are rejected as peers. Copy Expand all Collapse all { &quot;discover_peers&quot;: true, &quot;hostname&quot;: &quot;my-node&quot;, &quot;community&quot;: &quot;some-common-password&quot;, &quot;networks&quot;: [ &quot;192.168.1.0/24&quot; ], &quot;whitelist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ], &quot;blacklist&quot;: [ &quot;zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=&quot; ] } ","version":"Next","tagName":"h2"},{"title":"Legal","type":0,"sectionRef":"#","url":"/docs/legal","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Imprint‚Äã","type":1,"pageTitle":"Legal","url":"/docs/legal#imprint","content":" Information according to ¬ß 5 of the German DDG:  Steffen Vogel Monschauer Str. 16 52152 Simmerath E-Mail: info@cunicu.li Supervisory authority: Aachen  ","version":"Next","tagName":"h2"},{"title":"Liability for content‚Äã","type":1,"pageTitle":"Legal","url":"/docs/legal#liability-for-content","content":" The contents of our pages have been created with the greatest care. However, we cannot assume any liability for the correctness, completeness and topicality of the content. As a service provider, we are responsible for our own content on these pages in accordance with ¬ß 7 (1) DDG (German Digital Services Act) and general laws. According to ¬ß¬ß 8 to 10 DDG, however, we as a service provider are not obliged to monitor transmitted or stored third-party information or to investigate circumstances that indicate illegal activity. Obligations to remove or block the use of information in accordance with general legislation remain unaffected by this. However, liability in this respect is only possible from the time of knowledge of a specific infringement. As soon as we become aware of such infringements, we will remove this content immediately.  ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/install","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"From the Binary Releases‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#from-the-binary-releases","content":" Every release of cunƒ´cu provides binary releases for a variety of OSes. These binary versions can be manually downloaded and installed.  ","version":"Next","tagName":"h2"},{"title":"By Hand‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#by-hand","content":" Download your desired versionUnzip it: gunzip cunicu_0.0.1_linux_amd64.tar.gzMove the unzipped binary to its desired destination: mv cunicu /usr/local/bin/cunicuMake it executable: chmod +x /usr/local/bin/cunicuFrom there, you should be able to run the client and add the stable repo: cunicu help.  note cunƒ´cu automated tests are performed for Linux, macOS and Windows on x86_64, ARMv6, ARMv8 amd ARM64 architectures. Testing of other OSes are the responsibility of the community requesting cunƒ´cu for the OS in question.  ","version":"Next","tagName":"h2"},{"title":"From Script‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#from-script","content":" cunƒ´cu also has an installer script that will automatically grab the latest version of cunƒ´cu and install it locally.  You can fetch that script, and then execute it locally. It's well documented so that you can read through it and understand what it is doing before you run it.  curl -fsSL -o get_cunicu.sh get.cunicu.li chmod 700 get_cunicu.sh ./get_cunicu.sh   Yes, you can curl -fsSL get.cunicu.li | bash if you want to live on the edge.  ","version":"Next","tagName":"h2"},{"title":"Through Package Managers‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#through-package-managers","content":" cunƒ´cu provides the ability to install via operating system package managers.  ","version":"Next","tagName":"h2"},{"title":"From Apt (Debian, Ubuntu)‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#from-apt-debian-ubuntu","content":" sudo apt-get install apt-transport-https --yes echo &quot;deb [arch=$(dpkg --print-architecture) trusted=yes] https://packages.cunicu.li/apt/ /&quot; | sudo tee /etc/apt/sources.list.d/cunicu.list sudo apt-get update sudo apt-get install cunicu   ","version":"Next","tagName":"h3"},{"title":"From Yum (Redhat, Fedora, RockyLinux)‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#from-yum-redhat-fedora-rockylinux","content":" echo '[cunicu] name=cunicu baseurl=https://packages.cunicu.li/yum/ enabled=1 gpgcheck=0' | sudo tee /etc/yum.repos.d/cunicu.repo sudo yum install cunicu   ","version":"Next","tagName":"h3"},{"title":"From Homebrew (macOS)‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#from-homebrew-macos","content":" A formulae for cunƒ´cu is available in our Homebrew Tap: https://github.com/cunicu/homebrew-cunicu.  brew tap cunicu/cunicu brew install cunicu   ","version":"Next","tagName":"h3"},{"title":"From Archlinux User Repository (AUR)‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#from-archlinux-user-repository-aur","content":" cunƒ´cu is available in the Archlinux User Repository: https://aur.archlinux.org/packages/cunicu-bin.  via Yaourt yaourt -S cunicu-bin   or via Packer packer -S cunicu-bin   or via yay yay cunicu-bin   ","version":"Next","tagName":"h3"},{"title":"Nix‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#nix","content":" The nix branch of the cunicu repo is intended to always have a working nix package/flake.  Flakes‚Äã  Building and installing cunƒ´cu via Nix is possible with flakes:  nix profile install github:cunicu/cunicu/nix?dir=nix   Legacy‚Äã  You can also use nix-env/nix-build if you have cunicu checked out locally.  # check out cunicu git clone https://github.com/cunicu/cunicu --branch nix &amp;&amp; cd cunicu # Build cunicu and add it to the environment nix-env -if ./nix   ","version":"Next","tagName":"h3"},{"title":"From Source (all)‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#from-source-all","content":" Building cunƒ´cu is fairly easy and allows you to install the latest unreleased version.  You must have a working Go environment.  go install github.com/cunicu/cunicu/cmd/cunicu@latest   If required, it will fetch the dependencies and cache them, and validate configuration. It will then compile cunƒ´cu and place it in ${GOPATH}/bin/cunicu.  ","version":"Next","tagName":"h2"},{"title":"Conclusion‚Äã","type":1,"pageTitle":"Installation","url":"/docs/install#conclusion","content":" In most cases, installation is as simple as getting a pre-built cunƒ´cu binary. This document covers additional cases for those who want to do more sophisticated things with cunƒ´cu.  Once you have cunƒ´cu successfully installed, you can move on to using cunƒ´cu to setup your mesh VPN network. ","version":"Next","tagName":"h2"},{"title":"Liability for links‚Äã","type":1,"pageTitle":"Legal","url":"/docs/legal#liability-for-links","content":" Our website contains links to external third-party websites over whose content we have no influence. Therefore, we cannot accept any liability for this third-party content. The respective provider or operator of the pages is always responsible for the content of the linked pages. The linked pages were checked for possible legal violations at the time of linking. Illegal content was not recognizable at the time of linking. However, permanent monitoring of the content of the linked pages is not reasonable without concrete evidence of an infringement. If we become aware of any legal infringements, we will remove such links immediately.  ","version":"Next","tagName":"h2"},{"title":"Copyright‚Äã","type":1,"pageTitle":"Legal","url":"/docs/legal#copyright","content":" The content and works created by the site operators on these pages are subject to German copyright law. Duplication, processing, distribution and any form of commercialization of such material beyond the scope of the copyright law shall require the prior written consent of its respective author or creator. Downloads and copies of this site are only permitted for private, non-commercial use. Insofar as the content on this site was not created by the operator, the copyrights of third parties are respected. In particular, third-party content is identified as such. Should you nevertheless become aware of a copyright infringement, please inform us accordingly. If we become aware of any infringements, we will remove such content immediately.  For more details about the copyright of the material published on this page, please refer to our license page.  ","version":"Next","tagName":"h2"},{"title":"Data protection‚Äã","type":1,"pageTitle":"Legal","url":"/docs/legal#data-protection","content":" The use of our website is generally possible without providing personal data. Insofar as personal data (e.g. name, address or e-mail addresses) is collected on our pages, this is always done on a voluntary basis as far as possible. This data will not be passed on to third parties without your express consent. We would like to point out that data transmission over the Internet (e.g. when communicating by e-mail) may be subject to security vulnerabilities. Complete protection of data against access by third parties is not possible. We hereby expressly prohibit the use of contact data published within the scope of the imprint obligation by third parties for sending unsolicited advertising and information material. The operators of this website expressly reserve the right to take legal action in the event of the unsolicited sending of advertising information, such as spam e-mails.  ","version":"Next","tagName":"h2"},{"title":"Trademarks‚Äã","type":1,"pageTitle":"Legal","url":"/docs/legal#trademarks","content":" WireGuard and the WireGuard logo are registered trademarks of Jason A. Donenfeld. ","version":"Next","tagName":"h2"},{"title":"Route Synchronization","type":0,"sectionRef":"#","url":"/docs/features/rtsync","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Route Synchronization","url":"/docs/features/rtsync#configuration","content":" The following settings can be used in the main section of the configuration file or with-in the interfaces section to customize settings of an individual interface.    sync_routes boolean (Route Synchronization) Default: true Enable route synchronization. routing_table integer (Kernel Routing Table) Default: 254 Kernel routing table which is used. On Linux, see /etc/iproute2/rt_tables for table ids and names watch_routes boolean (Watch Routes) Default: true Keep watching the for changes in the kernel routing table via netlink multicast group. Copy { &quot;sync_routes&quot;: true, &quot;routing_table&quot;: 254, &quot;watch_routes&quot;: true } ","version":"Next","tagName":"h2"},{"title":"Usage","type":0,"sectionRef":"#","url":"/docs/usage","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Example Use-cases‚Äã","type":1,"pageTitle":"Usage","url":"/docs/usage#example-use-cases","content":" ","version":"Next","tagName":"h2"},{"title":"Zero-configuration (almost)‚Äã","type":1,"pageTitle":"Usage","url":"/docs/usage#zero-configuration-almost","content":" Invocation: cunicu daemon --community a-secret-shared-passphrase wg0  ","version":"Next","tagName":"h2"},{"title":"Start user-space WireGuard daemon‚Äã","type":1,"pageTitle":"Usage","url":"/docs/usage#start-user-space-wireguard-daemon","content":" Invocation: cunicu daemon --wg-userspace wg0  ","version":"Next","tagName":"h2"},{"title":"Co-exist with wg-quick, NetworkManager and or Manual WireGuard configuration‚Äã","type":1,"pageTitle":"Usage","url":"/docs/usage#co-exist-with-wg-quick-networkmanager-and-or-manual-wireguard-configuration","content":" Invocation: cunicu daemon ","version":"Next","tagName":"h2"},{"title":"Licence","type":0,"sectionRef":"#","url":"/docs/license","content":"","keywords":"go  golang  iot  networking  nat-traversal  vpn  vpn-manager  mesh  ice  multi-agent-systems  wireguard  edge-cloud  wireguard-vpn","version":"Next"},{"title":"Apache License‚Äã","type":1,"pageTitle":"Licence","url":"/docs/license#apache-license","content":" Version 2.0, January 2004 &lt;http://www.apache.org/licenses/&gt;  ","version":"Next","tagName":"h2"},{"title":"Terms and Conditions for use, reproduction, and distribution‚Äã","type":1,"pageTitle":"Licence","url":"/docs/license#terms-and-conditions-for-use-reproduction-and-distribution","content":" 1. Definitions‚Äã  ‚ÄúLicense‚Äù shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  ‚ÄúLicensor‚Äù shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  ‚ÄúLegal Entity‚Äù shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, ‚Äúcontrol‚Äù means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  ‚ÄúYou‚Äù (or ‚ÄúYour‚Äù) shall mean an individual or Legal Entity exercising permissions granted by this License.  ‚ÄúSource‚Äù form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  ‚ÄúObject‚Äù form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  ‚ÄúWork‚Äù shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  ‚ÄúDerivative Works‚Äù shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  ‚ÄúContribution‚Äù shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, ‚Äúsubmitted‚Äù means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as ‚ÄúNot a Contribution.‚Äù  ‚ÄúContributor‚Äù shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License‚Äã  Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License‚Äã  Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution‚Äã  You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices stating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and(d) If the Work includes a ‚ÄúNOTICE‚Äù text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions‚Äã  Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks‚Äã  This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty‚Äã  Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an ‚ÄúAS IS‚Äù BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability‚Äã  In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability‚Äã  While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  ","version":"Next","tagName":"h3"},{"title":"APPENDIX: How to apply the Apache License to your work‚Äã","type":1,"pageTitle":"Licence","url":"/docs/license#appendix-how-to-apply-the-apache-license-to-your-work","content":" To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same ‚Äúprinted page‚Äù as the copyright notice for easier identification within third-party archives.  Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}