# An interval at which wice will periodically check for added, removed or modified WireGuard interfaces.
watch_interval: 1s

backends:
- grpc://localhost:8080?insecure=true&skip_verify=true
- k8s:///path/to/your/kubeconfig.yaml?namespace=default

# WireGuard settings
wireguard:  
  # Create WireGuard interfaces using bundled wireguard-go Userspace implementation
  # This will be the default if there is no WireGuard kernel module present.
  userspace: false

  # Ignore WireGuard interface which do not match this regular expression
  interface_filter: .*

  # A list of WireGuard interfaces which should be configured
  interfaces:
  - wg-vpn

  # Port range for ListenPort setting of newly created WireGuard interfaces
  # wice will select the first available port in this range.
  port:
    min: 52820
    max: 65535

# RPC control socket settings
rpc:
  socket: /var/run/wice.sock

  # Start of wice daemon will block until its unblocked via the control socket
  # Mostly useful for testing automation
  wait: false

# Synchronize local WireGuard interface configuration with wg(8) config-files.
config_sync:
  enabled: false
  
  # Directory where Wireguard configuration files are located.
  # We expect the same format as used by wg(8) and wg-quick(8).
  # Filenames must match the interface name with a '.conf' suffix.
  path: /etc/wireguard

  # Watch the configuration files via inotify(7) for changes and apply them accordingly.
  watch: false
  
# Synchronize the kernel routing table with WireGuard's AllowedIPs setting
# 
# It checks for routes in the kernel routing table which have a peers link-local address
# as next-hop and adds those routes to the AllowedIPs setting of the respective peer.
#
# In reverse, also networks listed in a peers AllowedIPs setting will be installed as a
# kernel route with the peers link-local address as the routes next-hop. 
route_sync:
  enabled: true

  table: 254 # See /etc/iproute2/rt_tables for table ids

  # Keep watching the for changes in the kernel routing table via netlink multicast group.
  watch: true

# Pass events to external processes or web hook handlers
hooks:
- type: exec
  command: ../../scripts/hook.sh

  # Prepend additional arguments
  args: []

  # Pass JSON object via Stdin to command
  stdin: true

  # Set environment variables for invocation
  env:
    COLOR: "1"

- type: web

  # URL of the webhook endpoint
  url: https://my-webhook-endpoint.com/api/v1/webhook
  
  # HTTP method of request
  method: POST

  # Pass additional HTTP headers.
  headers:
    User-Agent: ahoi
    Authorization: Bearer XXXXXX

# Discovery of other WireGuard peers
peer_disc:
  enabled: true

  # A list of WireGuard public keys which are accepted peers
  whitelist:
  - coNsGPwVPdpahc8U+dbbWGzTAdCd6+1BvPIYg10wDCI=
  - AOZzBaNsoV7P8vo0D5UmuIJUQ7AjMbHbGt2EA8eAuEc=

  # A passphrase shared among all peers of the same community
  community: "some-common-password"

# Discovery of WireGuard endpoint addresses
endpoint_disc:
  enabled: true

  # Interactive Connectivity Establishment (ICE) parameters
  ice:
    # A list of STUN and TURN servers used by ICE.
    urls:
    - stun:stun.l.google.com:19302

    # Credentials for STUN/TURN servers configured above.
    username: ""
    password: ""

    # Allow connections to STUNS/TURNS servers for which we can not validate TLS certificates.
    insecure_skip_verify: false

    # Limit available network and candidate types.
    network_types: [udp4, udp6, tcp4, tcp6]
    candidate_types: [host, srflx, prflx ,relay]

    # Regular expression whitelist of interfaces which are used to gather ICE candidates (e.g. \"eth[0-9]+\").
    interface_filter: .*

    # Lite agents do not perform connectivity check and only provide host candidates.
    lite: false

    # Enable local Multicast DNS discovery.
    mdns: false

    # Sets the max amount of binding requests the agent will send over a candidate pair for validation or nomination.
    # If after the the configured number, the candidate is yet to answer a binding request or a nomination we set the pair as failed.
    max_binding_requests: 7

    # SetNAT1To1IPs sets a list of external IP addresses of 1:1 (D)NAT and a candidate type for which the external IP address is used.
    # This is useful when you are host a server using Pion on an AWS EC2 instance which has a private address, behind a 1:1 DNAT with a public IP (e.g. Elastic IP).
    # In this case, you can give the public IP address so that Pion will use the public IP address in its candidate instead of the private IP address.
    nat_1to1_ips: []

    # Limit the port range used by ICE
    port:
        # Minimum port for allocation policy for ICE sockets (range: 0-65535)
        min: 49152

        # Maximum port for allocation policy for ICE sockets (range: 0-65535)
        max: 65535

    # Interval at which the agent performs candidate checks in the connecting phase
    check_interval: 200ms
    
    # Time until an Agent transitions disconnected.
    # If the duration is 0, the ICE Agent will never go to disconnected
    disconnected_timeout: 5s

    # Time until an Agent transitions to failed after disconnected
    # If the duration is 0, we will never go to failed.
    failed_timeout: 5s

    # Time to wait before ICE restart
    restart_timeout: 5s

    # Interval between STUN keepalives (should be less then connection timeout above).
    # Af the interval is 0, we never send keepalive packets
    keepalive_interval: 2s
