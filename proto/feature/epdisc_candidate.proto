// SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package cunicu.epdisc;
option go_package = "github.com/stv0g/cunicu/pkg/proto/feature/epdisc";

import "common.proto";

enum CandidatePairState {
    UNSPECIFIED_CANDIDATE_PAIR_STATE = 0;

    // CandidatePairStateWaiting means a check has not been performed for
	// this pair
	WAITING = 1;

	// CandidatePairStateInProgress means a check has been sent for this pair,
	// but the transaction is in progress.
	INPROGRESS = 2;

	// CandidatePairStateFailed means a check for this pair was already done
	// and failed, either never producing any response or producing an unrecoverable
	// failure response.
	FAILED_ = 3;

	// CandidatePairStateSucceeded means a check for this pair was already
	// done and produced a successful result.
	SUCCEEDED = 4;
}

// ICE Candidate types
// See: https://datatracker.ietf.org/doc/html/rfc8445#section-5.1.1
enum CandidateType {
    UNSPECIFIED_CANDIDATE_TYPE = 0;
    HOST = 1;
    SERVER_REFLEXIVE = 2;
    PEER_REFLEXIVE = 3;
    RELAY = 4;
}

enum NetworkType {
    UNSPECIFIED_NETWORK_TYPE = 0;
    UDP4 = 1;
	UDP6 = 2;
	TCP4 = 3;
	TCP6 = 4;
}

// Type of TCP candidate
// See: https://datatracker.ietf.org/doc/html/rfc6544
enum TCPType {
    UNSPECIFIED_TCP_TYPE = 0;
    ACTIVE = 1;
    PASSIVE = 2;
    SIMULTANEOUS_OPEN = 3;
}

enum RelayProtocol {
    UNSPECIFIED_RELAY_PROTOCOL = 0;
    UDP = 1;
    TCP = 2;
    TLS = 3;
    DTLS = 4;
}

message CandidatePair {
    Candidate local = 1;
    Candidate remote = 2;
}

// The Related Address conveys transport addresses related to the candidate,
// useful for diagnostics and other purposes.
// See: https://datatracker.ietf.org/doc/html/rfc8839#section-5.1
message RelatedAddress {
	string address = 1;
	int32  port = 2;
}

// An ICE Candidate contains a transport address for a candidate that can be used for connectivity checks.
// See: https://datatracker.ietf.org/doc/html/rfc8839#section-5.1
message Candidate {
    // The type of candidate
    CandidateType type = 1;

    NetworkType network_type = 2;
    TCPType tcp_type = 3;

    // An identifier that is equivalent for two candidates that are of the same type, share the same base, and come from the same STUN server.
    string foundation = 4;

    // A positive integer between 1 and 256 that identifies the specific component of the media stream for which this is a candidate.
    int32 component = 5;

    // A positive integer between 1 and (2**31 - 1).
    int32 priority = 6;

    // The IP address of the candidate.
    string address = 7;

    // The port of the candidate.
    int32 port = 8;

    // The related address conveys transport addresses related to the candidate, useful for diagnostics and other purposes.
    RelatedAddress related_address = 9;

	// The protocol used between the endpoint and the relay server.
	RelayProtocol relay_protocol = 10;
}

// CandidatePairStats contains ICE candidate pair statistics
message CandidatePairStats {
	// Timestamp is the timestamp associated with this object.
	Timestamp timestamp = 1;

	// LocalCandidateID is the ID of the local candidate
	string local_candidate_id = 2;

	// RemoteCandidateID is the ID of the remote candidate
	string remote_candidate_id = 3;

	// State represents the state of the checklist for the local and remote
	// candidates in a pair.
	CandidatePairState state = 4;

	// Nominated is true when this valid pair that should be used for media
	// if it is the highest-priority one amongst those whose nominated flag is set
	bool nominated = 5;

	// PacketsSent represents the total number of packets sent on this candidate pair.
	uint32 packets_sent = 6; 

	// PacketsReceived represents the total number of packets received on this candidate pair.
	uint32 packets_received = 7;

	// BytesSent represents the total number of payload bytes sent on this candidate pair
	// not including headers or padding.
	uint64 bytes_sent = 8;

	// BytesReceived represents the total number of payload bytes received on this candidate pair
	// not including headers or padding.
	uint64 bytes_received = 9;

	// LastPacketSentTimestamp represents the timestamp at which the last packet was
	// sent on this particular candidate pair, excluding STUN packets.
	Timestamp last_packet_sent_timestamp = 10;

	// LastPacketReceivedTimestamp represents the timestamp at which the last packet
	// was received on this particular candidate pair, excluding STUN packets.
	Timestamp last_packet_received_timestamp = 11;

	// FirstRequestTimestamp represents the timestamp at which the first STUN request
	// was sent on this particular candidate pair.
	Timestamp first_request_timestamp = 12;

	// LastRequestTimestamp represents the timestamp at which the last STUN request
	// was sent on this particular candidate pair. The average interval between two
	// consecutive connectivity checks sent can be calculated with
	// (LastRequestTimestamp - FirstRequestTimestamp) / RequestsSent.
	Timestamp last_request_timestamp = 13;

	// LastResponseTimestamp represents the timestamp at which the last STUN response
	// was received on this particular candidate pair.
	Timestamp last_response_timestamp = 14;

	// TotalRoundTripTime represents the sum of all round trip time measurements
	// in seconds since the beginning of the session, based on STUN connectivity
	// check responses (ResponsesReceived), including those that reply to requests
	// that are sent in order to verify consent. The average round trip time can
	// be computed from TotalRoundTripTime by dividing it by ResponsesReceived.
	double total_roundtrip_time = 15;

	// CurrentRoundTripTime represents the latest round trip time measured in seconds,
	// computed from both STUN connectivity checks, including those that are sent
	// for consent verification.
	double current_roundtrip_time = 16;

	// AvailableOutgoingBitrate is calculated by the underlying congestion control
	// by combining the available bitrate for all the outgoing RTP streams using
	// this candidate pair. The bitrate measurement does not count the size of the
	// IP or other transport layers like TCP or UDP. It is similar to the TIAS defined
	// in RFC 3890, i.e., it is measured in bits per second and the bitrate is calculated
	// over a 1 second window.
	double available_outgoing_bitrate = 17;

	// AvailableIncomingBitrate is calculated by the underlying congestion control
	// by combining the available bitrate for all the incoming RTP streams using
	// this candidate pair. The bitrate measurement does not count the size of the
	// IP or other transport layers like TCP or UDP. It is similar to the TIAS defined
	// in  RFC 3890, i.e., it is measured in bits per second and the bitrate is
	// calculated over a 1 second window.
	double available_incoming_bitrate = 18;

	// CircuitBreakerTriggerCount represents the number of times the circuit breaker
	// is triggered for this particular 5-tuple, ceasing transmission.
	uint32 circuit_breaker_trigger_count = 19;

	// RequestsReceived represents the total number of connectivity check requests
	// received (including retransmissions). It is impossible for the receiver to
	// tell whether the request was sent in order to check connectivity or check
	// consent, so all connectivity checks requests are counted here.
	uint64 requests_received = 20;

	// RequestsSent represents the total number of connectivity check requests
	// sent (not including retransmissions).
	uint64 requests_sent = 21;

	// ResponsesReceived represents the total number of connectivity check responses received.
	uint64 responses_received = 22;

	// ResponsesSent epresents the total number of connectivity check responses sent.
	// Since we cannot distinguish connectivity check requests and consent requests,
	// all responses are counted.
	uint64 responses_sent = 23;

	// RetransmissionsReceived represents the total number of connectivity check
	// request retransmissions received.
	uint64 retransmissions_received = 24;

	// RetransmissionsSent represents the total number of connectivity check
	// request retransmissions sent.
	uint64 retransmissions_sent = 25;

	// ConsentRequestsSent represents the total number of consent requests sent.
	uint64 consent_requests_sent = 26;

	// ConsentExpiredTimestamp represents the timestamp at which the latest valid
	// STUN binding response expired.
	Timestamp consent_expired_timestamp = 27;
}

// CandidateStats contains ICE candidate statistics related to the ICETransport objects.
message CandidateStats {
	// Timestamp is the timestamp associated with this object.
	Timestamp timestamp = 1;

	// ID is the candidate ID
	string id = 2;

	// NetworkType represents the type of network interface used by the base of a
	// local candidate (the address the ICE agent sends from). Only present for
	// local candidates; it's not possible to know what type of network interface
	// a remote candidate is using.
	//
	// Note:
	// This stat only tells you about the network interface used by the first "hop";
	// it's possible that a connection will be bottlenecked by another type of network.
	// For example, when using Wi-Fi tethering, the networkType of the relevant candidate
	// would be "wifi", even when the next hop is over a cellular connection.
	NetworkType network_type = 3;

	// IP is the IP address of the candidate, allowing for IPv4 addresses and
	// IPv6 addresses, but fully qualified domain names (FQDNs) are not allowed.
	string ip = 4;

	// Port is the port number of the candidate.
	int32 port = 5;

	// CandidateType is the "Type" field of the ICECandidate.
	CandidateType candidate_type = 6;

	// Priority is the "Priority" field of the ICECandidate.
	uint32 priority = 7;

	// URL is the URL of the TURN or STUN server indicated in the that translated
	// this IP address. It is the URL address surfaced in an PeerConnectionICEEvent.
	string url = 8;

	// RelayProtocol is the protocol used by the endpoint to communicate with the
	// TURN server. This is only present for local candidates. Valid values for
	// the TURN URL protocol is one of udp, tcp, or tls.
	RelayProtocol relay_protocol = 9;

	// Deleted is true if the candidate has been deleted/freed. For host candidates,
	// this means that any network resources (typically a socket) associated with the
	// candidate have been released. For TURN candidates, this means the TURN allocation
	// is no longer active.
	//
	// Only defined for local candidates. For remote candidates, this property is not applicable.
	bool deleted = 10;
}
