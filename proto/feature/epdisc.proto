syntax = "proto3";

package cunicu.epdisc;
option go_package = "github.com/stv0g/cunicu/pkg/proto/feature/epdisc";

import "common.proto";
import "feature/epdisc_candidate.proto";

enum ConnectionState {
	// ICE Connection state from pion/ice/ice.go
	NEW = 0;              // ConnectionStateNew ICE agent is gathering addresses
	CHECKING = 1;         // ConnectionStateChecking ICE agent has been given local and remote candidates, and is attempting to find a match
	CONNECTED = 2;        // ConnectionStateConnected ICE agent has a pairing, but is still checking other pairs
	COMPLETED = 3;        // ConnectionStateCompleted ICE agent has finished
	FAILED = 4;           // ConnectionStateFailed ICE agent never could successfully connect
	DISCONNECTED = 5;     // ConnectionStateDisconnected ICE agent connected successfully, but has entered a failed state
	CLOSED = 6;           // ConnectionStateClosed ICE agent has finished and is no longer handling requests

	// Extended ICE Connection state from cunicu/pkg/ice/types.go
	CREATING = 100;       // ConnectionStateCreating New ICE agent is currently being created
	IDLE = 101;           // ConnectionStateIdle ICE agent has been created but is waiting for remote credentials
	CONNECTING = 102;     // ConnectionStateConnecting ICE agent is now connecting to the remote
	CLOSING = 103;        // ConnectionStateClosing ICE agent is now closing
}

enum Reachability {
    NO_REACHABILITY = 0;
    DIRECT_UDP = 1;
    DIRECT_TCP = 2;
    RELAY_UDP = 3;
    RELAY_TCP = 4;
    ROUTED = 5;
}

enum NATType {
    NAT_NONE = 0;
    NAT_NFTABLES = 1;
}

enum ProxyType {
    NO_PROXY = 0;
    USER_BIND = 1;
    KERNEL_CONN = 2;
    KERNEL_NAT = 3;
}

message Credentials {
    // ICE username fragment
    string ufrag = 1;

    // ICE password
    string pwd = 2;

    // Flag to indicate that the sending peer requests the credentials of the receiving peer
    bool need_creds = 3;
}

message Interface {
    NATType nat_type = 1;
    uint32 mux_port  = 2;
    uint32 mux_srflx_port = 3;
}

message Peer {
    ProxyType proxy_type = 1;
    ConnectionState state = 2;

    CandidatePair selected_candidate_pair = 4;
    
    repeated CandidateStats local_candidate_stats = 6;
    repeated CandidateStats remote_candidate_stats = 7;
    repeated CandidatePairStats candidate_pair_stats = 8;
    
    Timestamp last_state_change_timestamp = 9;

    uint32 restarts = 10;
    Reachability reachability = 11;
}
