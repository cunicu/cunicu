"use strict";(self.webpackChunkcunicu=self.webpackChunkcunicu||[]).push([[6971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(s,".").concat(d)]||p[d]||h[d]||i;return n?a.createElement(m,o(o({ref:t},l),{},{components:n})):a.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:r,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},15156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={title:"Welcome",sidebar_position:1,hide_title:!0},o=void 0,c={unversionedId:"index",id:"index",title:"Welcome",description:"GitHub build",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/cunicu/cunicu/edit/main/docs/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Welcome",sidebar_position:1,hide_title:!0},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/docs/install"}},s={},u=[{value:"Getting started",id:"getting-started",level:2},{value:"Authors",id:"authors",level:2},{value:"Join us",id:"join-us",level:2},{value:"Name",id:"name",level:2},{value:"License",id:"license",level:2},{value:"Funding acknowledgement",id:"funding-acknowledgement",level:2},{value:"Trademark",id:"trademark",level:2}],l={toc:u},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{style:{width:"60%"},src:"/img/cunicu_logo.svg",alt:"cun\u012bcu logo"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cunicu/cunicu/actions"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/actions/workflow/status/cunicu/cunicu/build.yaml?style=flat-square",alt:"GitHub build"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://goreportcard.com/report/github.com/cunicu/cunicu"},(0,r.kt)("img",{parentName:"a",src:"https://goreportcard.com/badge/github.com/cunicu/cunicu?style=flat-square",alt:"goreportcard"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://app.codecov.io/gh/cunicu/cunicu"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/codecov/c/github/cunicu/cunicu?token=WWQ6SR16LA&style=flat-square",alt:"Codecov"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cunicu/cunicu/blob/main/LICENSE"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/license/cunicu/cunicu?style=flat-square",alt:"License"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/go-mod/go-version/cunicu/cunicu?style=flat-square",alt:"GitHub go.mod Go version"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/cunicu/cunicu"},(0,r.kt)("img",{parentName:"a",src:"https://pkg.go.dev/badge/github.com/cunicu/cunicu.svg",alt:"Go Reference"})))),(0,r.kt)("admonition",{title:"cun\u012bcu is currently still in an Alpha state and not usable yet \ud83d\udea7",type:"caution"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cunicu/cunicu"},"cun\u012bcu")," is a user-space daemon managing ",(0,r.kt)("a",{parentName:"p",href:"https://wireguard.com"},"WireGuard\xae")," interfaces to establish a mesh of peer-to-peer VPN connections in harsh network environments."),(0,r.kt)("p",null,"To achieve this, cun\u012bcu utilizes a signaling layer to exchange peer information such as public encryption keys, hostname, advertised networks and reachability information to automate the configuration of the networking links.\nFrom a user perspective, cun\u012bcu alleviates the need of manual configuration such as exchange of public keys, IP addresses, endpoints, etc..\nHence, it adopts the design goals of the WireGuard project, to be simple and easy to use."),(0,r.kt)("p",null,"Thanks to ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment"},"Interactive Connectivity Establishment (ICE)"),", cun\u012bcu is capable to establish direct connections between peers which are located behind NAT firewalls such as home routers.\nIn situations where ICE fails, or direct UDP connectivity is not available, cun\u012bcu falls back to using TURN relays to reroute traffic over an intermediate hop or encapsulate the WireGuard traffic via TURN-TCP."),(0,r.kt)("p",null,"It relies on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pion/awesome-pion"},"awesome")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pion/ice"},"pion/ice")," package for ICE as well as bundles the a Go user-space implementation of WireGuard in a single binary for systems in which WireGuard kernel support has not landed yet."),(0,r.kt)("p",null,"With these features, cun\u012bcu can be used to quickly build multi-agent systems or connect field devices such as power grid monitoring infrastructure into a fully connected mesh.\nWithin the ",(0,r.kt)("a",{parentName:"p",href:"https://erigrid2.eu"},"ERIGrid 2.0 project"),", cun\u012bcu is used to interconnect smart grid laboratories for geographically distributed simulation of energy systems."),(0,r.kt)("p",null,"The project is currently actively developed by Steffen Vogel at the ",(0,r.kt)("a",{parentName:"p",href:"https://www.acs.eonerc.rwth-aachen.de"},"Institute for Automation of Complex Power Systems (ACS)")," of ",(0,r.kt)("a",{parentName:"p",href:"https://www.rwth-aachen.de"},"RWTH Aachen University")),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,"To use cun\u012bcu follow these steps on each host:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"/docs/install"},"Install cun\u012bcu")),(0,r.kt)("li",{parentName:"ol"},"Configure your WireGuard interfaces using ",(0,r.kt)("inlineCode",{parentName:"li"},"wg"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"wg-quick")," or ",(0,r.kt)("a",{parentName:"li",href:"https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/"},"NetworkManager")),(0,r.kt)("li",{parentName:"ol"},"Start the cun\u012bcu daemon by running: ",(0,r.kt)("inlineCode",{parentName:"li"},"sudo cunicu daemon"))),(0,r.kt)("p",null,"Make sure that in step 2. you have created WireGuard keys and exchanged them by hand between the hosts.\ncun\u012bcu does not (yet) discover available peers. You are responsible to add the peers to the WireGuard interface by yourself."),(0,r.kt)("p",null,"After the cun\u012bcu daemons have been started, they will attempt to discover valid endpoint addresses using the ICE protocol (e.g. contacting STUN servers).\nThese ",(0,r.kt)("em",{parentName:"p"},"ICE candidates")," are then exchanged via the signaling server and cun\u012bcu will update the endpoint addresses of the WireGuard peers accordingly.\nOnce this has been done, the cun\u012bcu logs should show a line ",(0,r.kt)("inlineCode",{parentName:"p"},"state=connected"),"."),(0,r.kt)("h2",{id:"authors"},"Authors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Steffen Vogel (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/stv0g"},"@stv0g"),", Institute for Automation of Complex Power Systems, RWTH Aachen University)")),(0,r.kt)("h2",{id:"join-us"},"Join us"),(0,r.kt)("p",null,"Please feel free to ",(0,r.kt)("a",{parentName:"p",href:"https://join.slack.com/t/gophers/shared_invite/zt-1447h1rgj-s9W5BcyRzBxUwNAZJUKmaQ"},"join our Slack channel")," ",(0,r.kt)("inlineCode",{parentName:"p"},"#cunicu")," in the ",(0,r.kt)("a",{parentName:"p",href:"https://gophers.slack.com/"},"Gophers workspace")," and say \ud83d\udc4b."),(0,r.kt)("h2",{id:"name"},"Name"),(0,r.kt)("p",null,"The project name ",(0,r.kt)("em",{parentName:"p"},"cun\u012bcu")," ","[","k\u028a\u02c8ni\u02d0k\u028a","]"," is derived from the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wiktionary.org/wiki/cuniculus#Latin"},"latin noun cun\u012bculus")," which means rabbit, a rabbit burrow or underground tunnel. We have choosen it as a name for this project as ",(0,r.kt)("em",{parentName:"p"},"cun\u012bcu")," builds tunnels between otherwise hard to reach network locations.\nIt has been changed from the former name ",(0,r.kt)("em",{parentName:"p"},"wice")," in order to broaden the scope of the project and avoid any potential trademark violations. "),(0,r.kt)("h2",{id:"license"},"License"),(0,r.kt)("p",null,"cun\u012bcu is licensed under the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cunicu/cunicu/blob/main/LICENSE"},"Apache 2.0")," license."),(0,r.kt)("h2",{id:"funding-acknowledgement"},"Funding acknowledgement"),(0,r.kt)("p",null,"The project has been initiated by Steffen Vogel while working at the ",(0,r.kt)("a",{parentName:"p",href:"https://www.acs.eonerc.rwth-aachen.de"},"Institute for Automation of Complex Power Systems (ACS)")," of ",(0,r.kt)("a",{parentName:"p",href:"https://www.rwth-aachen.de"},"RWTH Aachen University"),"."),(0,r.kt)("img",{alt:"European Flag",style:{height:"4em",marginRight:"10px"},src:"/img/flag_of_europe.svg",align:"left"})," The development of cun\u012bcu has been supported by the ",(0,r.kt)("a",{href:"https://erigrid2.eu"},"ERIGrid 2.0")," project of the H2020 Programme under ",(0,r.kt)("a",{href:"https://cordis.europa.eu/project/id/870620"},"Grant Agreement No. 870620"),(0,r.kt)("h2",{id:"trademark"},"Trademark"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"WireGuard")," and the ",(0,r.kt)("em",{parentName:"p"},"WireGuard")," logo are ",(0,r.kt)("a",{parentName:"p",href:"https://www.wireguard.com/trademark-policy/"},"registered trademarks")," of Jason A. Donenfeld."))}h.isMDXComponent=!0}}]);