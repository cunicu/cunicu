"use strict";(self.webpackChunkcunicu=self.webpackChunkcunicu||[]).push([[8027],{1669:(e,n,t)=>{t.d(n,{Z:()=>a});var i=t(7294),s=t(614);function a(e){let n={...e};n.language||(n.language="yaml"),n.title="/etc/cunicu.yaml";let t="# SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>\n# SPDX-License-Identifier: Apache-2.0\n\n# This is an example of a simple cunicu configuration file.\n# For a full example please look at cunicu.advanced.yaml\n\n\n## WireGuard interface settings\n#\n# These settings configure WireGuard specific settings\n# of the interface.\n#\n# The following settings can be overwritten for each interface\n# using the 'interfaces' settings (see below).\n# The following settings will be used as default.\n\n# A base64 private key generated by wg genkey.\n# Will be automatically generated if not provided.\nprivate_key: KLoqDLKgoqaUkwctTd+Ov3pfImOfadkkvTdPlXsuLWM=\n\n# The remote WireGuard peers provided as a dictionary\n# The keys of this dictionary are used as names for the peers\npeers:  \n  test:\n    # A base64 public key calculated by wg pubkey from a private key,\n    # and usually transmitted out of band\n    # to the author of the configuration file.\n    public_key: FlKHqqQQx+bTAq7+YhwEECwWRg2Ih7NQ48F/SeOYRH8=\n\n    # A base64 pre-shared key generated by wg genpsk.\n    # Optional, and may be omitted.\n    # This option adds an additional layer of symmetric-key\n    # cryptography to be mixed into the already existing\n    # public-key cryptography, for post-quantum resistance.\n    preshared_key: zu86NBVsWOU3cx4UKOQ6MgNj3gv8GXsV9ATzSemdqlI=\n\n    # An endpoint IP or hostname, followed by a colon,\n    # and then a port number. This endpoint will be updated\n    # automatically to the most recent source IP address and\n    # port of correctly authenticated packets from the peer.\n    # If provided, no endpoint discovery will be performed.\n    endpoint: vpn.example.com:51820\n\n    # A time duration, between 1 and 65535s inclusive, of how\n    # often to send an authenticated empty packet to the peer\n    # for the purpose of keeping a stateful firewall or NAT mapping\n    # valid persistently. For example, if the interface very rarely\n    # sends traffic, but it might at anytime receive traffic from a\n    # peer, and it is behind NAT, the interface might benefit from\n    # having a persistent keepalive interval of 25 seconds.\n    # If set to zero, this option is disabled.\n    # By default or when unspecified, this option is off.\n    # Most users will not need this. Optional.\n    persistent_keepalive: 120s\n\n    # A comma-separated list of IP (v4 or v6) addresses with\n    # CIDR masks from which incoming traffic for this peer is\n    # allowed and to which outgoing  traffic for this peer is directed.\n    # The catch-all 0.0.0.0/0 may be specified for matching\n    # all IPv4 addresses, and ::/0 may be specified for matching\n    # all IPv6 addresses. May be specified multiple times.\n    allowed_ips:\n    - 192.168.5.0/24\n\n## Basic interface settings\n#\n\n# The Maximum Transfer Unit of the WireGuard interface.\n# If not specified, the MTU is automatically determined from\n# the endpoint addresses or the system default route,\n# which is usually a sane choice.\n# However, to manually specify an MTU to override this\n# automatic discovery, this value may be specified explicitly.\nmtu: 1420\n\n# A list of IP (v4 or v6) addresses (optionally with CIDR masks)\n# to be assigned to the interface.\n# May be specified multiple times.\naddresses:\n- 10.10.0.1/24\n\n# A list of prefixes which cunicu uses to derive local addresses\n# from the interfaces public key\nprefixes:\n- fc2f:9a4d::/32\n- 10.237.0.0/16\n\n## Peer discovery\n#\n# Peer discovery finds new peers within the same community and adds them to the respective interface\ndiscover_peers: true\n\n# The hostname which gets advertised to remote peers\nhostname: my-node\n\n# A passphrase shared among all peers of the same community\ncommunity: \"some-common-password\"\n\n# Networks which are reachable via this peer and get advertised to remote peers\n# These will be part of this interfaces AllowedIPs at the remote peers.\nnetworks:\n- 192.168.1.0/24\n- 10.2.0.0/24\n\n\n## Endpoint discovery\n#\n# Endpoint discovery uses Interactive Connectivity Establishment (ICE) as used by WebRTC to\n# gather a list of candidate endpoints and performs connectivity checks to find a suitable\n# endpoint address which can be used by WireGuard\ndiscover_endpoints: true\n";if(n.section){const e=t.split("\n");let i=[],s=[],a=!1;for(let t of e){let e=!1,o=!1,r=t.startsWith("#"),c=""===t.trim(),d=t.match(/^([a-zA-z]+):/);null!==d&&(e=d[1]==n.section,o=d[1]!=n.section),r&&(a=!1,i.push(t)),e&&(a=!0,s.push(...i),i=[]),o&&(a=!1),c&&(i=[]),a&&s.push(t)}""==s[s.length-1]&&(s=s.slice(0,-1)),t=s.join("\n"),n.title=`Section "${n.section}" of ${n.title}`}return i.createElement(s.Z,n,t)}},3271:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=t(7462),s=(t(7294),t(3905)),a=t(1669);const o={sidebar_position:8},r="Configuration Reference",c={unversionedId:"config-reference",id:"config-reference",title:"Configuration Reference",description:"",source:"@site/docs/config-reference.md",sourceDirName:".",slug:"/config-reference",permalink:"/docs/config-reference",draft:!1,editUrl:"https://github.com/stv0g/cunicu/edit/master/docs/config-reference.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/config"},next:{title:"Features",permalink:"/docs/features/"}},d={},l=[],f={toc:l};function p(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"configuration-reference"},"Configuration Reference"),(0,s.kt)(a.Z,{mdxType:"ExampleConfig"}))}p.isMDXComponent=!0}}]);