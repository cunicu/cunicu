syntax = "proto3";

package wice;
option go_package = "riasc.eu/wice/pkg/pb";

import "common.proto";
import "event.proto";
import "interface.proto";
import "config.proto";
import "signaling.proto";

message Status {
    repeated Interface interfaces = 1;
}

message UnWaitParams {}
message StopParams {}
message StreamEventsParams {}
message SyncParams {}

message RemoveInterfaceParams {
    string intf = 1;
}

message RestartPeerParams {
    string intf = 1;
    bytes peer = 2;
}

message InterfaceConfigParams {
    string name = 1;
    InterfaceConfig interface = 2;
}

message GetSignalingMessageParams {
    // Interface name
    string intf = 1;
    
    // Public key of peer
    bytes peer = 2;
}

message GetSignalingMessageResp {
    SignalingEnvelope envelope = 1;
}

message PutSignalingMessageParams {
    SignalingEnvelope envelope = 1;
}

// Control socket
service Socket {
    rpc GetStatus(Void) returns (Status) {}
    rpc StreamEvents(StreamEventsParams) returns (stream Event) {}

    rpc UnWait(UnWaitParams) returns (Error) {}
    rpc Stop(StopParams) returns (Error) {}
    
    rpc Sync(SyncParams) returns (Error) {}

    rpc RestartPeer(RestartPeerParams) returns (Error) {}
    rpc RemoveInterface(RemoveInterfaceParams) returns (Error) {}

    rpc SyncInterfaceConfig(InterfaceConfigParams) returns (Error) {}
    rpc AddInterfaceConfig(InterfaceConfigParams) returns (Error) {}
    rpc SetInterfaceConfig(InterfaceConfigParams) returns (Error) {}

    // For manual signaling backend
    rpc GetSignalingMessage(GetSignalingMessageParams) returns (GetSignalingMessageResp) {}
    rpc PutSignalingMessage(PutSignalingMessageParams) returns (Error) {}
}
