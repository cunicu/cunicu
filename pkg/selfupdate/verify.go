package selfupdate

// derived from http://github.com/restic/restic

import (
	"bytes"
	"fmt"

	//lint:ignore SA1019 We still need to find an alternative
	"golang.org/x/crypto/openpgp"
)

var key = []byte(`
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
7v4ossHWij3JlvM7D6DM
=U7F2
-----END PGP PUBLIC KEY BLOCK-----
`)

// GPGVerify checks the authenticity of data by verifying the signature sig,
// which must be ASCII armored (base64). When the signature matches, GPGVerify
// returns true and a nil error.
func GPGVerify(data, sig []byte) (ok bool, err error) {
	keyring, err := openpgp.ReadArmoredKeyRing(bytes.NewReader(key))
	if err != nil {
		fmt.Printf("reading keyring failed")
		return false, err
	}

	_, err = openpgp.CheckArmoredDetachedSignature(keyring, bytes.NewReader(data), bytes.NewReader(sig))
	if err != nil {
		return false, err
	}

	return true, nil
}
