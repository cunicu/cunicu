/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "riasc.eu/wice/pkg/signaling/k8s/apis/wice/v1"
)

// SignalingEnvelopeLister helps list SignalingEnvelopes.
// All objects returned here must be treated as read-only.
type SignalingEnvelopeLister interface {
	// List lists all SignalingEnvelopes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SignalingEnvelope, err error)
	// SignalingEnvelopes returns an object that can list and get SignalingEnvelopes.
	SignalingEnvelopes(namespace string) SignalingEnvelopeNamespaceLister
	SignalingEnvelopeListerExpansion
}

// signalingEnvelopeLister implements the SignalingEnvelopeLister interface.
type signalingEnvelopeLister struct {
	indexer cache.Indexer
}

// NewSignalingEnvelopeLister returns a new SignalingEnvelopeLister.
func NewSignalingEnvelopeLister(indexer cache.Indexer) SignalingEnvelopeLister {
	return &signalingEnvelopeLister{indexer: indexer}
}

// List lists all SignalingEnvelopes in the indexer.
func (s *signalingEnvelopeLister) List(selector labels.Selector) (ret []*v1.SignalingEnvelope, err error) {
	err = cache.ListAll(s.indexer, selector, func(m any) {
		ret = append(ret, m.(*v1.SignalingEnvelope))
	})
	return ret, err
}

// SignalingEnvelopes returns an object that can list and get SignalingEnvelopes.
func (s *signalingEnvelopeLister) SignalingEnvelopes(namespace string) SignalingEnvelopeNamespaceLister {
	return signalingEnvelopeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SignalingEnvelopeNamespaceLister helps list and get SignalingEnvelopes.
// All objects returned here must be treated as read-only.
type SignalingEnvelopeNamespaceLister interface {
	// List lists all SignalingEnvelopes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SignalingEnvelope, err error)
	// Get retrieves the SignalingEnvelope from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SignalingEnvelope, error)
	SignalingEnvelopeNamespaceListerExpansion
}

// signalingEnvelopeNamespaceLister implements the SignalingEnvelopeNamespaceLister
// interface.
type signalingEnvelopeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SignalingEnvelopes in the indexer for a given namespace.
func (s signalingEnvelopeNamespaceLister) List(selector labels.Selector) (ret []*v1.SignalingEnvelope, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m any) {
		ret = append(ret, m.(*v1.SignalingEnvelope))
	})
	return ret, err
}

// Get retrieves the SignalingEnvelope from the indexer for a given namespace and name.
func (s signalingEnvelopeNamespaceLister) Get(name string) (*v1.SignalingEnvelope, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("signalingenvelope"), name)
	}
	return obj.(*v1.SignalingEnvelope), nil
}
