// SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: signaling/relay.proto

package signaling

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelayRegistry_GetRelays_FullMethodName = "/cunicu.signaling.RelayRegistry/GetRelays"
)

// RelayRegistryClient is the client API for RelayRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayRegistryClient interface {
	GetRelays(ctx context.Context, in *GetRelaysParams, opts ...grpc.CallOption) (*GetRelaysResp, error)
}

type relayRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayRegistryClient(cc grpc.ClientConnInterface) RelayRegistryClient {
	return &relayRegistryClient{cc}
}

func (c *relayRegistryClient) GetRelays(ctx context.Context, in *GetRelaysParams, opts ...grpc.CallOption) (*GetRelaysResp, error) {
	out := new(GetRelaysResp)
	err := c.cc.Invoke(ctx, RelayRegistry_GetRelays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayRegistryServer is the server API for RelayRegistry service.
// All implementations must embed UnimplementedRelayRegistryServer
// for forward compatibility
type RelayRegistryServer interface {
	GetRelays(context.Context, *GetRelaysParams) (*GetRelaysResp, error)
	mustEmbedUnimplementedRelayRegistryServer()
}

// UnimplementedRelayRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRelayRegistryServer struct {
}

func (UnimplementedRelayRegistryServer) GetRelays(context.Context, *GetRelaysParams) (*GetRelaysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelays not implemented")
}
func (UnimplementedRelayRegistryServer) mustEmbedUnimplementedRelayRegistryServer() {}

// UnsafeRelayRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayRegistryServer will
// result in compilation errors.
type UnsafeRelayRegistryServer interface {
	mustEmbedUnimplementedRelayRegistryServer()
}

func RegisterRelayRegistryServer(s grpc.ServiceRegistrar, srv RelayRegistryServer) {
	s.RegisterService(&RelayRegistry_ServiceDesc, srv)
}

func _RelayRegistry_GetRelays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelaysParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayRegistryServer).GetRelays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayRegistry_GetRelays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayRegistryServer).GetRelays(ctx, req.(*GetRelaysParams))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayRegistry_ServiceDesc is the grpc.ServiceDesc for RelayRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cunicu.signaling.RelayRegistry",
	HandlerType: (*RelayRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRelays",
			Handler:    _RelayRegistry_GetRelays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signaling/relay.proto",
}
