// SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: feature/epdisc_candidate.proto

package epdisc

import (
	proto "cunicu.li/cunicu/pkg/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CandidatePairState int32

const (
	CandidatePairState_UNSPECIFIED_CANDIDATE_PAIR_STATE CandidatePairState = 0
	// CandidatePairStateWaiting means a check has not been performed for
	// this pair
	CandidatePairState_WAITING CandidatePairState = 1
	// CandidatePairStateInProgress means a check has been sent for this pair,
	// but the transaction is in progress.
	CandidatePairState_INPROGRESS CandidatePairState = 2
	// CandidatePairStateFailed means a check for this pair was already done
	// and failed, either never producing any response or producing an unrecoverable
	// failure response.
	CandidatePairState_FAILED_ CandidatePairState = 3
	// CandidatePairStateSucceeded means a check for this pair was already
	// done and produced a successful result.
	CandidatePairState_SUCCEEDED CandidatePairState = 4
)

// Enum value maps for CandidatePairState.
var (
	CandidatePairState_name = map[int32]string{
		0: "UNSPECIFIED_CANDIDATE_PAIR_STATE",
		1: "WAITING",
		2: "INPROGRESS",
		3: "FAILED_",
		4: "SUCCEEDED",
	}
	CandidatePairState_value = map[string]int32{
		"UNSPECIFIED_CANDIDATE_PAIR_STATE": 0,
		"WAITING":                          1,
		"INPROGRESS":                       2,
		"FAILED_":                          3,
		"SUCCEEDED":                        4,
	}
)

func (x CandidatePairState) Enum() *CandidatePairState {
	p := new(CandidatePairState)
	*p = x
	return p
}

func (x CandidatePairState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandidatePairState) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_epdisc_candidate_proto_enumTypes[0].Descriptor()
}

func (CandidatePairState) Type() protoreflect.EnumType {
	return &file_feature_epdisc_candidate_proto_enumTypes[0]
}

func (x CandidatePairState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandidatePairState.Descriptor instead.
func (CandidatePairState) EnumDescriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{0}
}

// ICE Candidate types
// See: https://datatracker.ietf.org/doc/html/rfc8445#section-5.1.1
type CandidateType int32

const (
	CandidateType_UNSPECIFIED_CANDIDATE_TYPE CandidateType = 0
	CandidateType_HOST                       CandidateType = 1
	CandidateType_SERVER_REFLEXIVE           CandidateType = 2
	CandidateType_PEER_REFLEXIVE             CandidateType = 3
	CandidateType_RELAY                      CandidateType = 4
)

// Enum value maps for CandidateType.
var (
	CandidateType_name = map[int32]string{
		0: "UNSPECIFIED_CANDIDATE_TYPE",
		1: "HOST",
		2: "SERVER_REFLEXIVE",
		3: "PEER_REFLEXIVE",
		4: "RELAY",
	}
	CandidateType_value = map[string]int32{
		"UNSPECIFIED_CANDIDATE_TYPE": 0,
		"HOST":                       1,
		"SERVER_REFLEXIVE":           2,
		"PEER_REFLEXIVE":             3,
		"RELAY":                      4,
	}
)

func (x CandidateType) Enum() *CandidateType {
	p := new(CandidateType)
	*p = x
	return p
}

func (x CandidateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandidateType) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_epdisc_candidate_proto_enumTypes[1].Descriptor()
}

func (CandidateType) Type() protoreflect.EnumType {
	return &file_feature_epdisc_candidate_proto_enumTypes[1]
}

func (x CandidateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandidateType.Descriptor instead.
func (CandidateType) EnumDescriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{1}
}

type NetworkType int32

const (
	NetworkType_UNSPECIFIED_NETWORK_TYPE NetworkType = 0
	NetworkType_UDP4                     NetworkType = 1
	NetworkType_UDP6                     NetworkType = 2
	NetworkType_TCP4                     NetworkType = 3
	NetworkType_TCP6                     NetworkType = 4
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "UNSPECIFIED_NETWORK_TYPE",
		1: "UDP4",
		2: "UDP6",
		3: "TCP4",
		4: "TCP6",
	}
	NetworkType_value = map[string]int32{
		"UNSPECIFIED_NETWORK_TYPE": 0,
		"UDP4":                     1,
		"UDP6":                     2,
		"TCP4":                     3,
		"TCP6":                     4,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_epdisc_candidate_proto_enumTypes[2].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_feature_epdisc_candidate_proto_enumTypes[2]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{2}
}

// Type of TCP candidate
// See: https://datatracker.ietf.org/doc/html/rfc6544
type TCPType int32

const (
	TCPType_UNSPECIFIED_TCP_TYPE TCPType = 0
	TCPType_ACTIVE               TCPType = 1
	TCPType_PASSIVE              TCPType = 2
	TCPType_SIMULTANEOUS_OPEN    TCPType = 3
)

// Enum value maps for TCPType.
var (
	TCPType_name = map[int32]string{
		0: "UNSPECIFIED_TCP_TYPE",
		1: "ACTIVE",
		2: "PASSIVE",
		3: "SIMULTANEOUS_OPEN",
	}
	TCPType_value = map[string]int32{
		"UNSPECIFIED_TCP_TYPE": 0,
		"ACTIVE":               1,
		"PASSIVE":              2,
		"SIMULTANEOUS_OPEN":    3,
	}
)

func (x TCPType) Enum() *TCPType {
	p := new(TCPType)
	*p = x
	return p
}

func (x TCPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TCPType) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_epdisc_candidate_proto_enumTypes[3].Descriptor()
}

func (TCPType) Type() protoreflect.EnumType {
	return &file_feature_epdisc_candidate_proto_enumTypes[3]
}

func (x TCPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TCPType.Descriptor instead.
func (TCPType) EnumDescriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{3}
}

type RelayProtocol int32

const (
	RelayProtocol_UNSPECIFIED_RELAY_PROTOCOL RelayProtocol = 0
	RelayProtocol_UDP                        RelayProtocol = 1
	RelayProtocol_TCP                        RelayProtocol = 2
	RelayProtocol_TLS                        RelayProtocol = 3
	RelayProtocol_DTLS                       RelayProtocol = 4
)

// Enum value maps for RelayProtocol.
var (
	RelayProtocol_name = map[int32]string{
		0: "UNSPECIFIED_RELAY_PROTOCOL",
		1: "UDP",
		2: "TCP",
		3: "TLS",
		4: "DTLS",
	}
	RelayProtocol_value = map[string]int32{
		"UNSPECIFIED_RELAY_PROTOCOL": 0,
		"UDP":                        1,
		"TCP":                        2,
		"TLS":                        3,
		"DTLS":                       4,
	}
)

func (x RelayProtocol) Enum() *RelayProtocol {
	p := new(RelayProtocol)
	*p = x
	return p
}

func (x RelayProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_epdisc_candidate_proto_enumTypes[4].Descriptor()
}

func (RelayProtocol) Type() protoreflect.EnumType {
	return &file_feature_epdisc_candidate_proto_enumTypes[4]
}

func (x RelayProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayProtocol.Descriptor instead.
func (RelayProtocol) EnumDescriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{4}
}

type CandidatePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Local  *Candidate `protobuf:"bytes,1,opt,name=local,proto3" json:"local,omitempty"`
	Remote *Candidate `protobuf:"bytes,2,opt,name=remote,proto3" json:"remote,omitempty"`
}

func (x *CandidatePair) Reset() {
	*x = CandidatePair{}
	mi := &file_feature_epdisc_candidate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandidatePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidatePair) ProtoMessage() {}

func (x *CandidatePair) ProtoReflect() protoreflect.Message {
	mi := &file_feature_epdisc_candidate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidatePair.ProtoReflect.Descriptor instead.
func (*CandidatePair) Descriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{0}
}

func (x *CandidatePair) GetLocal() *Candidate {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *CandidatePair) GetRemote() *Candidate {
	if x != nil {
		return x.Remote
	}
	return nil
}

// The Related Address conveys transport addresses related to the candidate,
// useful for diagnostics and other purposes.
// See: https://datatracker.ietf.org/doc/html/rfc8839#section-5.1
type RelatedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RelatedAddress) Reset() {
	*x = RelatedAddress{}
	mi := &file_feature_epdisc_candidate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedAddress) ProtoMessage() {}

func (x *RelatedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_feature_epdisc_candidate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedAddress.ProtoReflect.Descriptor instead.
func (*RelatedAddress) Descriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{1}
}

func (x *RelatedAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RelatedAddress) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// An ICE Candidate contains a transport address for a candidate that can be used for connectivity checks.
// See: https://datatracker.ietf.org/doc/html/rfc8839#section-5.1
type Candidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of candidate
	Type        CandidateType `protobuf:"varint,1,opt,name=type,proto3,enum=cunicu.epdisc.CandidateType" json:"type,omitempty"`
	NetworkType NetworkType   `protobuf:"varint,2,opt,name=network_type,json=networkType,proto3,enum=cunicu.epdisc.NetworkType" json:"network_type,omitempty"`
	TcpType     TCPType       `protobuf:"varint,3,opt,name=tcp_type,json=tcpType,proto3,enum=cunicu.epdisc.TCPType" json:"tcp_type,omitempty"`
	// An identifier that is equivalent for two candidates that are of the same type, share the same base, and come from the same STUN server.
	Foundation string `protobuf:"bytes,4,opt,name=foundation,proto3" json:"foundation,omitempty"`
	// A positive integer between 1 and 256 that identifies the specific component of the media stream for which this is a candidate.
	Component int32 `protobuf:"varint,5,opt,name=component,proto3" json:"component,omitempty"`
	// A positive integer between 1 and (2**31 - 1).
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// The IP address of the candidate.
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// The port of the candidate.
	Port int32 `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	// The related address conveys transport addresses related to the candidate, useful for diagnostics and other purposes.
	RelatedAddress *RelatedAddress `protobuf:"bytes,9,opt,name=related_address,json=relatedAddress,proto3" json:"related_address,omitempty"`
	// The protocol used between the endpoint and the relay server.
	RelayProtocol RelayProtocol `protobuf:"varint,10,opt,name=relay_protocol,json=relayProtocol,proto3,enum=cunicu.epdisc.RelayProtocol" json:"relay_protocol,omitempty"`
}

func (x *Candidate) Reset() {
	*x = Candidate{}
	mi := &file_feature_epdisc_candidate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Candidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candidate) ProtoMessage() {}

func (x *Candidate) ProtoReflect() protoreflect.Message {
	mi := &file_feature_epdisc_candidate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candidate.ProtoReflect.Descriptor instead.
func (*Candidate) Descriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{2}
}

func (x *Candidate) GetType() CandidateType {
	if x != nil {
		return x.Type
	}
	return CandidateType_UNSPECIFIED_CANDIDATE_TYPE
}

func (x *Candidate) GetNetworkType() NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return NetworkType_UNSPECIFIED_NETWORK_TYPE
}

func (x *Candidate) GetTcpType() TCPType {
	if x != nil {
		return x.TcpType
	}
	return TCPType_UNSPECIFIED_TCP_TYPE
}

func (x *Candidate) GetFoundation() string {
	if x != nil {
		return x.Foundation
	}
	return ""
}

func (x *Candidate) GetComponent() int32 {
	if x != nil {
		return x.Component
	}
	return 0
}

func (x *Candidate) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Candidate) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Candidate) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Candidate) GetRelatedAddress() *RelatedAddress {
	if x != nil {
		return x.RelatedAddress
	}
	return nil
}

func (x *Candidate) GetRelayProtocol() RelayProtocol {
	if x != nil {
		return x.RelayProtocol
	}
	return RelayProtocol_UNSPECIFIED_RELAY_PROTOCOL
}

// CandidatePairStats contains ICE candidate pair statistics
type CandidatePairStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp is the timestamp associated with this object.
	Timestamp *proto.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// LocalCandidateID is the ID of the local candidate
	LocalCandidateId string `protobuf:"bytes,2,opt,name=local_candidate_id,json=localCandidateId,proto3" json:"local_candidate_id,omitempty"`
	// RemoteCandidateID is the ID of the remote candidate
	RemoteCandidateId string `protobuf:"bytes,3,opt,name=remote_candidate_id,json=remoteCandidateId,proto3" json:"remote_candidate_id,omitempty"`
	// State represents the state of the checklist for the local and remote
	// candidates in a pair.
	State CandidatePairState `protobuf:"varint,4,opt,name=state,proto3,enum=cunicu.epdisc.CandidatePairState" json:"state,omitempty"`
	// Nominated is true when this valid pair that should be used for media
	// if it is the highest-priority one amongst those whose nominated flag is set
	Nominated bool `protobuf:"varint,5,opt,name=nominated,proto3" json:"nominated,omitempty"`
	// PacketsSent represents the total number of packets sent on this candidate pair.
	PacketsSent uint32 `protobuf:"varint,6,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	// PacketsReceived represents the total number of packets received on this candidate pair.
	PacketsReceived uint32 `protobuf:"varint,7,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	// BytesSent represents the total number of payload bytes sent on this candidate pair
	// not including headers or padding.
	BytesSent uint64 `protobuf:"varint,8,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// BytesReceived represents the total number of payload bytes received on this candidate pair
	// not including headers or padding.
	BytesReceived uint64 `protobuf:"varint,9,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	// LastPacketSentTimestamp represents the timestamp at which the last packet was
	// sent on this particular candidate pair, excluding STUN packets.
	LastPacketSentTimestamp *proto.Timestamp `protobuf:"bytes,10,opt,name=last_packet_sent_timestamp,json=lastPacketSentTimestamp,proto3" json:"last_packet_sent_timestamp,omitempty"`
	// LastPacketReceivedTimestamp represents the timestamp at which the last packet
	// was received on this particular candidate pair, excluding STUN packets.
	LastPacketReceivedTimestamp *proto.Timestamp `protobuf:"bytes,11,opt,name=last_packet_received_timestamp,json=lastPacketReceivedTimestamp,proto3" json:"last_packet_received_timestamp,omitempty"`
	// FirstRequestTimestamp represents the timestamp at which the first STUN request
	// was sent on this particular candidate pair.
	FirstRequestTimestamp *proto.Timestamp `protobuf:"bytes,12,opt,name=first_request_timestamp,json=firstRequestTimestamp,proto3" json:"first_request_timestamp,omitempty"`
	// LastRequestTimestamp represents the timestamp at which the last STUN request
	// was sent on this particular candidate pair. The average interval between two
	// consecutive connectivity checks sent can be calculated with
	// (LastRequestTimestamp - FirstRequestTimestamp) / RequestsSent.
	LastRequestTimestamp *proto.Timestamp `protobuf:"bytes,13,opt,name=last_request_timestamp,json=lastRequestTimestamp,proto3" json:"last_request_timestamp,omitempty"`
	// LastResponseTimestamp represents the timestamp at which the last STUN response
	// was received on this particular candidate pair.
	LastResponseTimestamp *proto.Timestamp `protobuf:"bytes,14,opt,name=last_response_timestamp,json=lastResponseTimestamp,proto3" json:"last_response_timestamp,omitempty"`
	// TotalRoundTripTime represents the sum of all round trip time measurements
	// in seconds since the beginning of the session, based on STUN connectivity
	// check responses (ResponsesReceived), including those that reply to requests
	// that are sent in order to verify consent. The average round trip time can
	// be computed from TotalRoundTripTime by dividing it by ResponsesReceived.
	TotalRoundtripTime float64 `protobuf:"fixed64,15,opt,name=total_roundtrip_time,json=totalRoundtripTime,proto3" json:"total_roundtrip_time,omitempty"`
	// CurrentRoundTripTime represents the latest round trip time measured in seconds,
	// computed from both STUN connectivity checks, including those that are sent
	// for consent verification.
	CurrentRoundtripTime float64 `protobuf:"fixed64,16,opt,name=current_roundtrip_time,json=currentRoundtripTime,proto3" json:"current_roundtrip_time,omitempty"`
	// AvailableOutgoingBitrate is calculated by the underlying congestion control
	// by combining the available bitrate for all the outgoing RTP streams using
	// this candidate pair. The bitrate measurement does not count the size of the
	// IP or other transport layers like TCP or UDP. It is similar to the TIAS defined
	// in RFC 3890, i.e., it is measured in bits per second and the bitrate is calculated
	// over a 1 second window.
	AvailableOutgoingBitrate float64 `protobuf:"fixed64,17,opt,name=available_outgoing_bitrate,json=availableOutgoingBitrate,proto3" json:"available_outgoing_bitrate,omitempty"`
	// AvailableIncomingBitrate is calculated by the underlying congestion control
	// by combining the available bitrate for all the incoming RTP streams using
	// this candidate pair. The bitrate measurement does not count the size of the
	// IP or other transport layers like TCP or UDP. It is similar to the TIAS defined
	// in  RFC 3890, i.e., it is measured in bits per second and the bitrate is
	// calculated over a 1 second window.
	AvailableIncomingBitrate float64 `protobuf:"fixed64,18,opt,name=available_incoming_bitrate,json=availableIncomingBitrate,proto3" json:"available_incoming_bitrate,omitempty"`
	// CircuitBreakerTriggerCount represents the number of times the circuit breaker
	// is triggered for this particular 5-tuple, ceasing transmission.
	CircuitBreakerTriggerCount uint32 `protobuf:"varint,19,opt,name=circuit_breaker_trigger_count,json=circuitBreakerTriggerCount,proto3" json:"circuit_breaker_trigger_count,omitempty"`
	// RequestsReceived represents the total number of connectivity check requests
	// received (including retransmissions). It is impossible for the receiver to
	// tell whether the request was sent in order to check connectivity or check
	// consent, so all connectivity checks requests are counted here.
	RequestsReceived uint64 `protobuf:"varint,20,opt,name=requests_received,json=requestsReceived,proto3" json:"requests_received,omitempty"`
	// RequestsSent represents the total number of connectivity check requests
	// sent (not including retransmissions).
	RequestsSent uint64 `protobuf:"varint,21,opt,name=requests_sent,json=requestsSent,proto3" json:"requests_sent,omitempty"`
	// ResponsesReceived represents the total number of connectivity check responses received.
	ResponsesReceived uint64 `protobuf:"varint,22,opt,name=responses_received,json=responsesReceived,proto3" json:"responses_received,omitempty"`
	// ResponsesSent epresents the total number of connectivity check responses sent.
	// Since we cannot distinguish connectivity check requests and consent requests,
	// all responses are counted.
	ResponsesSent uint64 `protobuf:"varint,23,opt,name=responses_sent,json=responsesSent,proto3" json:"responses_sent,omitempty"`
	// RetransmissionsReceived represents the total number of connectivity check
	// request retransmissions received.
	RetransmissionsReceived uint64 `protobuf:"varint,24,opt,name=retransmissions_received,json=retransmissionsReceived,proto3" json:"retransmissions_received,omitempty"`
	// RetransmissionsSent represents the total number of connectivity check
	// request retransmissions sent.
	RetransmissionsSent uint64 `protobuf:"varint,25,opt,name=retransmissions_sent,json=retransmissionsSent,proto3" json:"retransmissions_sent,omitempty"`
	// ConsentRequestsSent represents the total number of consent requests sent.
	ConsentRequestsSent uint64 `protobuf:"varint,26,opt,name=consent_requests_sent,json=consentRequestsSent,proto3" json:"consent_requests_sent,omitempty"`
	// ConsentExpiredTimestamp represents the timestamp at which the latest valid
	// STUN binding response expired.
	ConsentExpiredTimestamp *proto.Timestamp `protobuf:"bytes,27,opt,name=consent_expired_timestamp,json=consentExpiredTimestamp,proto3" json:"consent_expired_timestamp,omitempty"`
}

func (x *CandidatePairStats) Reset() {
	*x = CandidatePairStats{}
	mi := &file_feature_epdisc_candidate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandidatePairStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidatePairStats) ProtoMessage() {}

func (x *CandidatePairStats) ProtoReflect() protoreflect.Message {
	mi := &file_feature_epdisc_candidate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidatePairStats.ProtoReflect.Descriptor instead.
func (*CandidatePairStats) Descriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{3}
}

func (x *CandidatePairStats) GetTimestamp() *proto.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CandidatePairStats) GetLocalCandidateId() string {
	if x != nil {
		return x.LocalCandidateId
	}
	return ""
}

func (x *CandidatePairStats) GetRemoteCandidateId() string {
	if x != nil {
		return x.RemoteCandidateId
	}
	return ""
}

func (x *CandidatePairStats) GetState() CandidatePairState {
	if x != nil {
		return x.State
	}
	return CandidatePairState_UNSPECIFIED_CANDIDATE_PAIR_STATE
}

func (x *CandidatePairStats) GetNominated() bool {
	if x != nil {
		return x.Nominated
	}
	return false
}

func (x *CandidatePairStats) GetPacketsSent() uint32 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *CandidatePairStats) GetPacketsReceived() uint32 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *CandidatePairStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *CandidatePairStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *CandidatePairStats) GetLastPacketSentTimestamp() *proto.Timestamp {
	if x != nil {
		return x.LastPacketSentTimestamp
	}
	return nil
}

func (x *CandidatePairStats) GetLastPacketReceivedTimestamp() *proto.Timestamp {
	if x != nil {
		return x.LastPacketReceivedTimestamp
	}
	return nil
}

func (x *CandidatePairStats) GetFirstRequestTimestamp() *proto.Timestamp {
	if x != nil {
		return x.FirstRequestTimestamp
	}
	return nil
}

func (x *CandidatePairStats) GetLastRequestTimestamp() *proto.Timestamp {
	if x != nil {
		return x.LastRequestTimestamp
	}
	return nil
}

func (x *CandidatePairStats) GetLastResponseTimestamp() *proto.Timestamp {
	if x != nil {
		return x.LastResponseTimestamp
	}
	return nil
}

func (x *CandidatePairStats) GetTotalRoundtripTime() float64 {
	if x != nil {
		return x.TotalRoundtripTime
	}
	return 0
}

func (x *CandidatePairStats) GetCurrentRoundtripTime() float64 {
	if x != nil {
		return x.CurrentRoundtripTime
	}
	return 0
}

func (x *CandidatePairStats) GetAvailableOutgoingBitrate() float64 {
	if x != nil {
		return x.AvailableOutgoingBitrate
	}
	return 0
}

func (x *CandidatePairStats) GetAvailableIncomingBitrate() float64 {
	if x != nil {
		return x.AvailableIncomingBitrate
	}
	return 0
}

func (x *CandidatePairStats) GetCircuitBreakerTriggerCount() uint32 {
	if x != nil {
		return x.CircuitBreakerTriggerCount
	}
	return 0
}

func (x *CandidatePairStats) GetRequestsReceived() uint64 {
	if x != nil {
		return x.RequestsReceived
	}
	return 0
}

func (x *CandidatePairStats) GetRequestsSent() uint64 {
	if x != nil {
		return x.RequestsSent
	}
	return 0
}

func (x *CandidatePairStats) GetResponsesReceived() uint64 {
	if x != nil {
		return x.ResponsesReceived
	}
	return 0
}

func (x *CandidatePairStats) GetResponsesSent() uint64 {
	if x != nil {
		return x.ResponsesSent
	}
	return 0
}

func (x *CandidatePairStats) GetRetransmissionsReceived() uint64 {
	if x != nil {
		return x.RetransmissionsReceived
	}
	return 0
}

func (x *CandidatePairStats) GetRetransmissionsSent() uint64 {
	if x != nil {
		return x.RetransmissionsSent
	}
	return 0
}

func (x *CandidatePairStats) GetConsentRequestsSent() uint64 {
	if x != nil {
		return x.ConsentRequestsSent
	}
	return 0
}

func (x *CandidatePairStats) GetConsentExpiredTimestamp() *proto.Timestamp {
	if x != nil {
		return x.ConsentExpiredTimestamp
	}
	return nil
}

// CandidateStats contains ICE candidate statistics related to the ICETransport objects.
type CandidateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp is the timestamp associated with this object.
	Timestamp *proto.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// ID is the candidate ID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// NetworkType represents the type of network interface used by the base of a
	// local candidate (the address the ICE agent sends from). Only present for
	// local candidates; it's not possible to know what type of network interface
	// a remote candidate is using.
	//
	// Note:
	// This stat only tells you about the network interface used by the first "hop";
	// it's possible that a connection will be bottlenecked by another type of network.
	// For example, when using Wi-Fi tethering, the networkType of the relevant candidate
	// would be "wifi", even when the next hop is over a cellular connection.
	NetworkType NetworkType `protobuf:"varint,3,opt,name=network_type,json=networkType,proto3,enum=cunicu.epdisc.NetworkType" json:"network_type,omitempty"`
	// IP is the IP address of the candidate, allowing for IPv4 addresses and
	// IPv6 addresses, but fully qualified domain names (FQDNs) are not allowed.
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port is the port number of the candidate.
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// CandidateType is the "Type" field of the ICECandidate.
	CandidateType CandidateType `protobuf:"varint,6,opt,name=candidate_type,json=candidateType,proto3,enum=cunicu.epdisc.CandidateType" json:"candidate_type,omitempty"`
	// Priority is the "Priority" field of the ICECandidate.
	Priority uint32 `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	// URL is the URL of the TURN or STUN server indicated in the that translated
	// this IP address. It is the URL address surfaced in an PeerConnectionICEEvent.
	Url string `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	// RelayProtocol is the protocol used by the endpoint to communicate with the
	// TURN server. This is only present for local candidates. Valid values for
	// the TURN URL protocol is one of udp, tcp, or tls.
	RelayProtocol RelayProtocol `protobuf:"varint,9,opt,name=relay_protocol,json=relayProtocol,proto3,enum=cunicu.epdisc.RelayProtocol" json:"relay_protocol,omitempty"`
	// Deleted is true if the candidate has been deleted/freed. For host candidates,
	// this means that any network resources (typically a socket) associated with the
	// candidate have been released. For TURN candidates, this means the TURN allocation
	// is no longer active.
	//
	// Only defined for local candidates. For remote candidates, this property is not applicable.
	Deleted bool `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *CandidateStats) Reset() {
	*x = CandidateStats{}
	mi := &file_feature_epdisc_candidate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandidateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateStats) ProtoMessage() {}

func (x *CandidateStats) ProtoReflect() protoreflect.Message {
	mi := &file_feature_epdisc_candidate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateStats.ProtoReflect.Descriptor instead.
func (*CandidateStats) Descriptor() ([]byte, []int) {
	return file_feature_epdisc_candidate_proto_rawDescGZIP(), []int{4}
}

func (x *CandidateStats) GetTimestamp() *proto.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CandidateStats) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CandidateStats) GetNetworkType() NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return NetworkType_UNSPECIFIED_NETWORK_TYPE
}

func (x *CandidateStats) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CandidateStats) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CandidateStats) GetCandidateType() CandidateType {
	if x != nil {
		return x.CandidateType
	}
	return CandidateType_UNSPECIFIED_CANDIDATE_TYPE
}

func (x *CandidateStats) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CandidateStats) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CandidateStats) GetRelayProtocol() RelayProtocol {
	if x != nil {
		return x.RelayProtocol
	}
	return RelayProtocol_UNSPECIFIED_RELAY_PROTOCOL
}

func (x *CandidateStats) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

var File_feature_epdisc_candidate_proto protoreflect.FileDescriptor

var file_feature_epdisc_candidate_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63,
	0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a,
	0x0d, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2e,
	0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x30,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x22, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0xc4, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63,
	0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e,
	0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73,
	0x63, 0x2e, 0x54, 0x43, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x63, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64,
	0x69, 0x73, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x6e,
	0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xd5, 0x0b, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63,
	0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x56, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x49, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75,
	0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72,
	0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x74,
	0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x18, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x86, 0x03, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x6e, 0x69,
	0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x65, 0x70, 0x64, 0x69, 0x73,
	0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2a, 0x73, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x20, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x6e, 0x0a,
	0x0d, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x58, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x58, 0x49, 0x56, 0x45,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x2a, 0x53, 0x0a,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x44,
	0x50, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x44, 0x50, 0x36, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x43, 0x50, 0x34, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x43, 0x50, 0x36,
	0x10, 0x04, 0x2a, 0x53, 0x0a, 0x07, 0x54, 0x43, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x43, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0x54, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4c,
	0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x54, 0x4c, 0x53, 0x10, 0x04, 0x42, 0x2b, 0x5a,
	0x29, 0x63, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x2e, 0x6c, 0x69, 0x2f, 0x63, 0x75, 0x6e, 0x69, 0x63,
	0x75, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x65, 0x70, 0x64, 0x69, 0x73, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_feature_epdisc_candidate_proto_rawDescOnce sync.Once
	file_feature_epdisc_candidate_proto_rawDescData = file_feature_epdisc_candidate_proto_rawDesc
)

func file_feature_epdisc_candidate_proto_rawDescGZIP() []byte {
	file_feature_epdisc_candidate_proto_rawDescOnce.Do(func() {
		file_feature_epdisc_candidate_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_epdisc_candidate_proto_rawDescData)
	})
	return file_feature_epdisc_candidate_proto_rawDescData
}

var file_feature_epdisc_candidate_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_feature_epdisc_candidate_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_feature_epdisc_candidate_proto_goTypes = []any{
	(CandidatePairState)(0),    // 0: cunicu.epdisc.CandidatePairState
	(CandidateType)(0),         // 1: cunicu.epdisc.CandidateType
	(NetworkType)(0),           // 2: cunicu.epdisc.NetworkType
	(TCPType)(0),               // 3: cunicu.epdisc.TCPType
	(RelayProtocol)(0),         // 4: cunicu.epdisc.RelayProtocol
	(*CandidatePair)(nil),      // 5: cunicu.epdisc.CandidatePair
	(*RelatedAddress)(nil),     // 6: cunicu.epdisc.RelatedAddress
	(*Candidate)(nil),          // 7: cunicu.epdisc.Candidate
	(*CandidatePairStats)(nil), // 8: cunicu.epdisc.CandidatePairStats
	(*CandidateStats)(nil),     // 9: cunicu.epdisc.CandidateStats
	(*proto.Timestamp)(nil),    // 10: cunicu.Timestamp
}
var file_feature_epdisc_candidate_proto_depIdxs = []int32{
	7,  // 0: cunicu.epdisc.CandidatePair.local:type_name -> cunicu.epdisc.Candidate
	7,  // 1: cunicu.epdisc.CandidatePair.remote:type_name -> cunicu.epdisc.Candidate
	1,  // 2: cunicu.epdisc.Candidate.type:type_name -> cunicu.epdisc.CandidateType
	2,  // 3: cunicu.epdisc.Candidate.network_type:type_name -> cunicu.epdisc.NetworkType
	3,  // 4: cunicu.epdisc.Candidate.tcp_type:type_name -> cunicu.epdisc.TCPType
	6,  // 5: cunicu.epdisc.Candidate.related_address:type_name -> cunicu.epdisc.RelatedAddress
	4,  // 6: cunicu.epdisc.Candidate.relay_protocol:type_name -> cunicu.epdisc.RelayProtocol
	10, // 7: cunicu.epdisc.CandidatePairStats.timestamp:type_name -> cunicu.Timestamp
	0,  // 8: cunicu.epdisc.CandidatePairStats.state:type_name -> cunicu.epdisc.CandidatePairState
	10, // 9: cunicu.epdisc.CandidatePairStats.last_packet_sent_timestamp:type_name -> cunicu.Timestamp
	10, // 10: cunicu.epdisc.CandidatePairStats.last_packet_received_timestamp:type_name -> cunicu.Timestamp
	10, // 11: cunicu.epdisc.CandidatePairStats.first_request_timestamp:type_name -> cunicu.Timestamp
	10, // 12: cunicu.epdisc.CandidatePairStats.last_request_timestamp:type_name -> cunicu.Timestamp
	10, // 13: cunicu.epdisc.CandidatePairStats.last_response_timestamp:type_name -> cunicu.Timestamp
	10, // 14: cunicu.epdisc.CandidatePairStats.consent_expired_timestamp:type_name -> cunicu.Timestamp
	10, // 15: cunicu.epdisc.CandidateStats.timestamp:type_name -> cunicu.Timestamp
	2,  // 16: cunicu.epdisc.CandidateStats.network_type:type_name -> cunicu.epdisc.NetworkType
	1,  // 17: cunicu.epdisc.CandidateStats.candidate_type:type_name -> cunicu.epdisc.CandidateType
	4,  // 18: cunicu.epdisc.CandidateStats.relay_protocol:type_name -> cunicu.epdisc.RelayProtocol
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_feature_epdisc_candidate_proto_init() }
func file_feature_epdisc_candidate_proto_init() {
	if File_feature_epdisc_candidate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_epdisc_candidate_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feature_epdisc_candidate_proto_goTypes,
		DependencyIndexes: file_feature_epdisc_candidate_proto_depIdxs,
		EnumInfos:         file_feature_epdisc_candidate_proto_enumTypes,
		MessageInfos:      file_feature_epdisc_candidate_proto_msgTypes,
	}.Build()
	File_feature_epdisc_candidate_proto = out.File
	file_feature_epdisc_candidate_proto_rawDesc = nil
	file_feature_epdisc_candidate_proto_goTypes = nil
	file_feature_epdisc_candidate_proto_depIdxs = nil
}
